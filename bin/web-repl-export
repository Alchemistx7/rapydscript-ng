#!/usr/bin/env node 
// vim:ft=javascript:ts=4:et

"use strict";

var fs = require('fs');
var path = require('path');

var base = path.normalize(path.resolve(path.join(path.dirname(__dirname))));
var meta = JSON.parse(fs.readFileSync(path.join(base, 'package.json'), {'encoding':'utf-8'}));

var manifest = {}, total = 0;
['compiler.js', 'baselib-plain-pretty.js'].forEach(function(x) {
    manifest[x] = fs.readFileSync(path.join(base, 'lib', x), {'encoding':'utf-8'});
    total += manifest[x].length;
    if (x.indexOf('baselib') != -1 && x.indexOf('-plain') == -1) manifest[x] = JSON.parse(manifest[x]);
});

['web_repl.js', 'utils.js', 'completer.js'].forEach(function(x) {
    x = 'tools/' + x;
    manifest[x] = fs.readFileSync(path.join(base, x), {'encoding':'utf-8'});
    total += manifest[x].length;
});

var stdlib = path.join(base, 'src', 'lib');

function process_dir(relpath) {
    var fullpath = (relpath) ? path.join(stdlib, relpath) : stdlib;
    fs.readdirSync(fullpath).forEach(function (x) {
        var q = path.join(fullpath, x);
        var s = fs.statSync(q);
        if (s.isDirectory()) return process_dir(relpath + '/' + x);
        if (!x.endsWith('.pyj')) return;
        var iname = path.normalize('__stdlib__' + '/' + relpath + '/' + x);
        var raw = fs.readFileSync(q, {'encoding':'utf-8'});
        manifest[iname] = raw;
        total += s.size;
    });
}
process_dir('');


var rs = '// vim:fileencoding=utf-8\n';
rs += '(function(external_namespace) {\n';
rs += '"use strict;"\n';
rs += 'var rs_version = ' + JSON.stringify(meta.version) + ';\n';
rs += 'var data = ' + JSON.stringify(manifest) + ';\n\n';
rs += fs.readFileSync(path.join(base, 'web-repl', 'env.js'));
rs += '(function() {\n';
rs += fs.readFileSync(path.join(base, 'web-repl', 'sha1.js'));
rs += '}).call(jsSHA);\n';
rs += 'var exports = namespace;\n';
rs += fs.readFileSync(path.join(base, 'tools', 'export.js'), {'encoding':'utf-8'});
rs += 'external_namespace.RapydScript = namespace;\n';
rs += '})(this)';


var base_dir = process.argv.slice(-1)[0];
base_dir = path.normalize(path.resolve(base_dir));

try {
    fs.mkdirSync(base_dir);
} catch(e) {
    if (e.code != 'EEXIST') throw e;
}

process.chdir(base_dir);
fs.writeFileSync('rapydscript.js', rs, {'encoding':'utf-8'});
var web_repl = path.join(base, 'web-repl');
fs.readdirSync(web_repl).forEach(function(x) {
    if (['sha1.js', 'env.js'].indexOf(x) !== -1) return;
    var data = fs.readFileSync(path.join(web_repl, x), {'encoding':'utf-8'});
    fs.writeFileSync(x, data, {'encoding':'utf-8'});
});
console.log('RapydScript compiler (uncompressed) size: ' + (total/(1024)).toFixed(1) + ' KB');
console.log('web-repl exported to: ' + base_dir);
