{
  "abs()": "function abs() {\n            return Math.abs;\n        }",
  "max()": "function max() {\n            return Math.max;\n        }",
  "min()": "function min() {\n            return Math.min;\n        }",
  "dir": "function dir(item) {\n            var arr;\n            arr = _$rapyd$_list_decorate([]);\n            for (var i in item) {\n                arr.push(i);\n            }\n            return arr;\n        }",
  "enumerate": "function enumerate(iterable) {\n            var ans, iterator;\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                ans = {\n                    \"_i\": -1,\n                    \"next\": function() {\n                        this._i += 1;\n                        if (this._i < iterable.length) {\n                            return {\n                                \"done\": false,\n                                \"value\": _$rapyd$_list_decorate([ this._i, iterable[this._i] ])\n                            };\n                        }\n                        return {\n                            \"done\": true\n                        };\n                    }\n                };\n                ans[_$rapyd$_iterator_symbol] = function() {\n                    return this;\n                };\n                return ans;\n            }\n            if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n                iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n                ans = {\n                    \"_iterator\": iterator,\n                    \"_i\": -1,\n                    \"next\": function() {\n                        var r;\n                        r = this._iterator.next();\n                        if (r.done) {\n                            return {\n                                \"done\": true\n                            };\n                        }\n                        this._i += 1;\n                        return {\n                            \"done\": false,\n                            \"value\": _$rapyd$_list_decorate([ this._i, r.value ])\n                        };\n                    }\n                };\n                ans[_$rapyd$_iterator_symbol] = function() {\n                    return this;\n                };\n                return ans;\n            }\n            return enumerate(Object.keys(iterable));\n        }",
  "iter": "function iter(iterable) {\n            var ans;\n            if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n                return (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n            }\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                ans = {\n                    \"_i\": -1,\n                    \"next\": function() {\n                        this._i += 1;\n                        if (this._i < iterable.length) {\n                            return {\n                                \"done\": false,\n                                \"value\": iterable[this._i]\n                            };\n                        }\n                        return {\n                            \"done\": true\n                        };\n                    }\n                };\n                ans[_$rapyd$_iterator_symbol] = function() {\n                    return this;\n                };\n                return ans;\n            }\n            return iter(Object.keys(iterable));\n        }",
  "extends": "function _$rapyd$_extends(child, parent) {\n            child.prototype = Object.create(parent.prototype);\n            child.prototype.constructor = child;\n        }",
  "_$rapyd$_flatten": "function _$rapyd$_flatten(arr) {\n            var ans, value;\n            ans = _$rapyd$_list_decorate([]);\n            for (var i=0; i<arr.length; i++) {\n                value = arr[i];\n                if (Array.isArray(value)) {\n                    ans = ans.concat(_$rapyd$_flatten(value));\n                } else {\n                    ans.push(value);\n                }\n            }\n            return ans;\n        }",
  "_$rapyd$_in()": "function _$rapyd$_in() {\n            if (typeof Map === \"function\" && typeof Set === \"function\") {\n                return function(val, arr) {\n                    if (Array.isArray(arr) || typeof arr === \"string\") {\n                        return arr.indexOf(val) !== -1;\n                    }\n                    if (typeof arr.__contains__ === \"function\") {\n                        return arr.__contains__(val);\n                    }\n                    if ((arr instanceof Map || arr instanceof Set)) {\n                        return arr.has(val);\n                    }\n                    return arr.hasOwnProperty(val);\n                };\n            }\n            return function(val, arr) {\n                if (Array.isArray(arr) || typeof arr === \"string\") {\n                    return arr.indexOf(val) !== -1;\n                }\n                if (typeof arr.__contains__ === \"function\") {\n                    return arr.__contains__(val);\n                }\n                return arr.hasOwnProperty(val);\n            };\n        }",
  "iterable": "function _$rapyd$_Iterable(iterable) {\n            var iterator, ans, result;\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                return iterable;\n            }\n            if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n                iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n                ans = _$rapyd$_list_decorate([]);\n                result = iterator.next();\n                while (!result.done) {\n                    ans.push(result.value);\n                    result = iterator.next();\n                }\n                return ans;\n            }\n            return Object.keys(iterable);\n        }",
  "len()": "function _$rapyd$_len() {\n            if (typeof Set === \"function\" && typeof Map === \"function\") {\n                return function(obj) {\n                    if (Array.isArray(obj) || typeof obj === \"string\") {\n                        return obj.length;\n                    }\n                    if (obj instanceof Set || obj instanceof Map) {\n                        return obj.size;\n                    }\n                    if (typeof obj.__len__ === \"function\") {\n                        return obj.__len__();\n                    }\n                    return Object.keys(obj).length;\n                };\n            }\n            return function(obj) {\n                if (Array.isArray(obj) || typeof obj === \"string\") {\n                    return obj.length;\n                }\n                if (typeof obj.__len__ === \"function\") {\n                    return obj.__len__();\n                }\n                return Object.keys(obj).length;\n            };\n        }",
  "range": "function range(start, stop, step) {\n            var length;\n            if (arguments.length <= 1) {\n                stop = start || 0;\n                start = 0;\n            }\n            step = arguments[2] || 1;\n            length = Math.max(Math.ceil((stop - start) / step), 0);\n            return (function(){\n                var d = {};\n                d[_$rapyd$_iterator_symbol] = function() {\n                    return this;\n                };\n                d[\"_i\"] = start - step;\n                d[\"_idx\"] = -1;\n                d[\"next\"] = function() {\n                    this._i += step;\n                    this._idx += 1;\n                    if (this._idx >= length) {\n                        return {\n                            \"done\": true\n                        };\n                    }\n                    return {\n                        \"done\": false,\n                        \"value\": this._i\n                    };\n                };\n                return d;\n            })();\n        }",
  "reversed": "function reversed(iterable) {\n            var ans;\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                ans = {\n                    \"_i\": iterable.length,\n                    \"next\": function() {\n                        this._i -= 1;\n                        if (this._i > -1) {\n                            return {\n                                \"done\": false,\n                                \"value\": iterable[this._i]\n                            };\n                        }\n                        return {\n                            \"done\": true\n                        };\n                    }\n                };\n                ans[_$rapyd$_iterator_symbol] = function() {\n                    return this;\n                };\n                return ans;\n            }\n            throw TypeError(\"reversed() can only be called on arrays or strings\");\n        }",
  "getattr": "function getattr(obj, name, defval) {\n            var ret;\n            try {\n                ret = obj[name];\n            } catch (_$rapyd$_Exception) {\n                if (_$rapyd$_Exception instanceof TypeError) {\n                    if (defval === undefined) {\n                        throw new AttributeError(\"The attribute \" + name + \" is not present\");\n                    }\n                    return defval;\n                } else {\n                    throw _$rapyd$_Exception;\n                }\n            }\n            if (ret === undefined && !(name in obj)) {\n                if (defval === undefined) {\n                    throw new AttributeError(\"The attribute \" + name + \" is not present\");\n                }\n                ret = defval;\n            }\n            return ret;\n        }",
  "setattr": "function setattr(obj, name, value) {\n            obj[name] = value;\n        }",
  "hasattr": "function hasattr(obj, name) {\n            return name in obj;\n        }",
  "_$rapyd$_desugar_kwargs()": "function _$rapyd$_desugar_kwargs() {\n            if (typeof Object.assign === \"function\") {\n                return function() {\n                    var ans;\n                    ans = {};\n                    ans[_$rapyd$_kwargs_symbol] = true;\n                    return Object.assign.apply(ans, arguments);\n                };\n            }\n            return function() {\n                var ans, keys;\n                ans = {};\n                ans[_$rapyd$_kwargs_symbol] = true;\n                for (var i = 0; i < arguments.length; i++) {\n                    keys = Object.keys(arguments[i]);\n                    for (var j = 0; j < keys.length; j++) {\n                        ans[keys[j]] = arguments[i][keys[j]];\n                    }\n                }\n                return ans;\n            };\n        }",
  "#dependencies#": {
    "builtins": {},
    "containers": {
      "min()": true,
      "max()": true,
      "iterable": true
    },
    "errors": {
      "extends": true
    },
    "itertools": {
      "iter": true
    }
  },
  "builtins": "function _$rapyd$_bool(val) {\n    return !!val;\n}\nfunction _$rapyd$_bind(fn, thisArg) {\n    var ret;\n    if (fn.orig) {\n        fn = fn.orig;\n    }\n    if (thisArg === false) {\n        return fn;\n    }\n    ret = function() {\n        return fn.apply(thisArg, arguments);\n    };\n    ret.orig = fn;\n    return ret;\n}\nfunction _$rapyd$_rebind_all(thisArg, rebind) {\n    if (typeof rebind === \"undefined\") {\n        rebind = true;\n    }\n    for (var p in thisArg) {\n        if (thisArg[p] && thisArg[p].orig) {\n            if (rebind) {\n                thisArg[p] = _$rapyd$_bind(thisArg[p], thisArg);\n            } else {\n                thisArg[p] = thisArg[p].orig;\n            }\n        }\n    }\n}\nfunction _$rapyd$_eslice(arr, step, start, end) {\n    var isString;\n    arr = arr.slice(0);\n    if (typeof arr === \"string\" || arr instanceof String) {\n        isString = true;\n        arr = arr.split(\"\");\n    }\n    if (step < 0) {\n        step = -step;\n        arr.reverse();\n        if (typeof start !== \"undefined\") {\n            start = arr.length - start - 1;\n        }\n        if (typeof end !== \"undefined\") {\n            end = arr.length - end - 1;\n        }\n    }\n    if (typeof start === \"undefined\") {\n        start = 0;\n    }\n    if (typeof end === \"undefined\") {\n        end = arr.length;\n    }\n    arr = arr.slice(start, end).filter(function(e, i) {\n        return i % step === 0;\n    });\n    return (isString) ? arr.join(\"\") : arr;\n}\nfunction _$rapyd$_mixin(target, source, overwrite) {\n    for (var i in source) {\n        if (source.hasOwnProperty(i) && overwrite || typeof target[i] === \"undefined\") {\n            target[i] = source[i];\n        }\n    }\n}\nfunction _$rapyd$_print() {\n    if (typeof console === \"object\") {\n        console.log.apply(console, arguments);\n    }\n}\nvar bool = _$rapyd$_bool, bind = _$rapyd$_bind, rebind_all = _$rapyd$_rebind_all;\nvar float = parseFloat, int = parseInt, rebind_all = _$rapyd$_rebind_all;\nvar mixin = _$rapyd$_mixin, print = _$rapyd$_print, eslice = _$rapyd$_eslice;",
  "containers": "function _$rapyd$_equals(a, b) {\n    try {\n        return a.__eq__(b);\n    } catch (_$rapyd$_Exception) {\n        if (_$rapyd$_Exception instanceof TypeError) {\n            return a === b;\n        } else {\n            throw _$rapyd$_Exception;\n        }\n    }\n}\nvar equals = _$rapyd$_equals;\nfunction _$rapyd$_list_extend(iterable) {\n    var start, iterator, result;\n    if (Array.isArray(iterable) || typeof iterable === \"string\") {\n        start = this.length;\n        this.length += iterable.length;\n        for (var i = 0; i < iterable.length; i++) {\n            this[start + i] = iterable[i];\n        }\n    } else {\n        iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n        result = iterator.next();\n        while (!result.done) {\n            this.push(result.value);\n            result = iterator.next();\n        }\n    }\n}\nfunction _$rapyd$_list_index(val, start, stop) {\n    var idx;\n    start = start || 0;\n    if (start < 0) {\n        start = this.length + start;\n    }\n    if (start < 0) {\n        throw new ValueError(val + \" is not in list\");\n    }\n    if (stop === undefined) {\n        idx = this.indexOf(val, start);\n        if (idx === -1) {\n            throw new ValueError(val + \" is not in list\");\n        }\n        return idx;\n    }\n    if (stop < 0) {\n        stop = this.length + stop;\n    }\n    for (var i = start; i < stop; i++) {\n        if (this[i] === val) {\n            return i;\n        }\n    }\n    throw new ValueError(val + \" is not in list\");\n}\nfunction _$rapyd$_list_pop(index) {\n    var ans;\n    if (this.length === 0) {\n        throw new IndexError(\"list is empty\");\n    }\n    ans = this.splice(index, 1);\n    if (!ans.length) {\n        throw new IndexError(\"pop index out of range\");\n    }\n    return ans[0];\n}\nfunction _$rapyd$_list_remove(value) {\n    var idx;\n    idx = this.indexOf(value);\n    if (idx === -1) {\n        throw new ValueError(value + \" not in list\");\n    }\n    this.splice(idx, 1);\n}\nfunction _$rapyd$_list_to_string() {\n    return \"[\" + this.join(\", \") + \"]\";\n}\nfunction _$rapyd$_list_insert(index, val) {\n    if (index < 0) {\n        index += this.length;\n    }\n    index = min(this.length, max(index, 0));\n    if (index === 0) {\n        this.unshift(val);\n        return;\n    }\n    for (var i = this.length; i > index; i--) {\n        this[i] = this[i - 1];\n    }\n    this[index] = val;\n}\nfunction _$rapyd$_list_copy() {\n    return _$rapyd$_list_constructor(this);\n}\nfunction _$rapyd$_list_clear() {\n    this.length = 0;\n}\nfunction _$rapyd$_list_as_array() {\n    return Array.prototype.slice.call(this);\n}\nfunction _$rapyd$_list_count(value) {\n    return this.reduce(function(n, val) {\n        return n + (val === value);\n    }, 0);\n}\nfunction _$rapyd$_list_sort_key(value) {\n    var t;\n    t = typeof value;\n    if (t === \"string\" || t === \"number\") {\n        return value;\n    }\n    return value.toString();\n}\nfunction _$rapyd$_list_sort_cmp(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nfunction _$rapyd$_list_sort() {\n    var key = (arguments[0] === undefined || ( 0 === arguments.length-1 && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true)) ? (null) : arguments[0];\n    var reverse = (arguments[1] === undefined || ( 1 === arguments.length-1 && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [_$rapyd$_kwargs_symbol] === true)) ? (false) : arguments[1];\n    var _$rapyd$_kwargs_obj = arguments[arguments.length-1];\n    if (typeof _$rapyd$_kwargs_obj !== \"object\" || _$rapyd$_kwargs_obj [_$rapyd$_kwargs_symbol] !== true) _$rapyd$_kwargs_obj = {};\n    if (Object.prototype.hasOwnProperty.call(_$rapyd$_kwargs_obj, \"key\")){\n        key = _$rapyd$_kwargs_obj.key;\n    }\n    if (Object.prototype.hasOwnProperty.call(_$rapyd$_kwargs_obj, \"reverse\")){\n        reverse = _$rapyd$_kwargs_obj.reverse;\n    }\n    var mult, keymap, k;\n    key = key || _$rapyd$_list_sort_key;\n    mult = (reverse) ? -1 : 1;\n    keymap = {};\n    for (var i=0; i < this.length; i++) {\n        k = this[i];\n        keymap[k] = key(k);\n    }\n    this.sort(function(a, b) {\n        return mult * _$rapyd$_list_sort_cmp(keymap[a], keymap[b]);\n    });\n}\nfunction _$rapyd$_list_concat() {\n    var ans;\n    ans = Array.prototype.concat.apply(this, arguments);\n    _$rapyd$_list_decorate(ans);\n    return ans;\n}\nfunction _$rapyd$_list_slice() {\n    var ans;\n    ans = Array.prototype.slice.apply(this, arguments);\n    _$rapyd$_list_decorate(ans);\n    return ans;\n}\nfunction _$rapyd$_list_iterator(value) {\n    var self;\n    self = this;\n    return {\n        \"_i\": -1,\n        \"_list\": self,\n        \"next\": function() {\n            this._i += 1;\n            if (this._i >= this._list.length) {\n                return {\n                    \"done\": true\n                };\n            }\n            return {\n                \"done\": false,\n                \"value\": this._list[this._i]\n            };\n        }\n    };\n}\nfunction _$rapyd$_list_len() {\n    return this.length;\n}\nfunction _$rapyd$_list_contains(val) {\n    return this.indexOf(val) !== -1;\n}\nfunction _$rapyd$_list_eq(other) {\n    if (!Array.isArray(other)) {\n        return false;\n    }\n    if (other.length !== this.length) {\n        return false;\n    }\n    if (other.length === 0) {\n        return true;\n    }\n    for (var i = 0; i < other.length; i++) {\n        if (!_$rapyd$_equals(this[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction _$rapyd$_list_decorate(ans) {\n    ans.append = Array.prototype.push;\n    ans.toString = _$rapyd$_list_to_string;\n    ans.inspect = _$rapyd$_list_to_string;\n    ans.extend = _$rapyd$_list_extend;\n    ans.index = _$rapyd$_list_index;\n    ans.pypop = _$rapyd$_list_pop;\n    ans.remove = _$rapyd$_list_remove;\n    ans.insert = _$rapyd$_list_insert;\n    ans.copy = _$rapyd$_list_copy;\n    ans.clear = _$rapyd$_list_clear;\n    ans.count = _$rapyd$_list_count;\n    ans.concat = _$rapyd$_list_concat;\n    ans.pysort = _$rapyd$_list_sort;\n    ans.slice = _$rapyd$_list_slice;\n    ans.as_array = _$rapyd$_list_as_array;\n    ans.__len__ = _$rapyd$_list_len;\n    ans.__contains__ = _$rapyd$_list_contains;\n    ans.__eq__ = _$rapyd$_list_eq;\n    ans.constructor = _$rapyd$_list_constructor;\n    if (typeof ans[_$rapyd$_iterator_symbol] !== \"function\") {\n        ans[_$rapyd$_iterator_symbol] = _$rapyd$_list_iterator;\n    }\n    return ans;\n}\nfunction _$rapyd$_list_constructor(iterable) {\n    var ans, iterator, result;\n    if (iterable === undefined) {\n        ans = [];\n    } else if (Array.isArray(iterable) || typeof iterable === \"string\") {\n        ans = new Array(iterable.length);\n        for (var i = 0; i < iterable.length; i++) {\n            ans[i] = iterable[i];\n        }\n    } else if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n        iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n        ans = _$rapyd$_list_decorate([]);\n        result = iterator.next();\n        while (!result.done) {\n            ans.push(result.value);\n            result = iterator.next();\n        }\n    } else if (typeof iterable === \"number\") {\n        ans = new Array(iterable);\n    } else {\n        ans = Object.keys(iterable);\n    }\n    return _$rapyd$_list_decorate(ans);\n}\n_$rapyd$_list_constructor.__name__ = \"list\";\nvar list = _$rapyd$_list_constructor, list_wrap = _$rapyd$_list_decorate;\nvar _$rapyd$_global_object_id = 0, _$rapyd$_set_implementation;\nfunction _$rapyd$_set_keyfor(x) {\n    var t, ans;\n    t = typeof x;\n    if (t === \"string\" || t === \"number\" || t === \"boolean\") {\n        return t[0] + x;\n    }\n    if (x == null) {\n        return \"_!@#$0\";\n    }\n    ans = x._$rapyd$_hash_key_prop;\n    if (ans === undefined) {\n        ans = \"_!@#$\" + ++_$rapyd$_global_object_id;\n        Object.defineProperty(x, \"_$rapyd$_hash_key_prop\", {\n            \"value\": ans\n        });\n    }\n    return ans;\n}\nfunction _$rapyd$_set_polyfill() {\n    this._store = {};\n    this.size = 0;\n}\n_$rapyd$_set_polyfill.prototype.add = function(x) {\n    var key;\n    key = _$rapyd$_set_keyfor(x);\n    if (!Object.hasOwnProperty.call(this._store, key)) {\n        this.size += 1;\n        this._store[key] = x;\n    }\n    return this;\n};\n_$rapyd$_set_polyfill.prototype.clear = function(x) {\n    this._store = {};\n    this.size = 0;\n};\n_$rapyd$_set_polyfill.prototype.delete = function(x) {\n    var key;\n    key = _$rapyd$_set_keyfor(x);\n    if (Object.hasOwnProperty.call(this._store, key)) {\n        this.size -= 1;\n        delete this._store[key];\n        return true;\n    }\n    return false;\n};\n_$rapyd$_set_polyfill.prototype.has = function(x) {\n    return Object.hasOwnProperty.call(this._store, _$rapyd$_set_keyfor(x));\n};\n_$rapyd$_set_polyfill.prototype.values = function(x) {\n    var keys, s;\n    keys = Object.keys(this._store);\n    s = this._store;\n    return (function(){\n        var d = {};\n        d[\"_keys\"] = keys;\n        d[\"_i\"] = -1;\n        d[\"_s\"] = s;\n        d[_$rapyd$_iterator_symbol] = function() {\n            return this;\n        };\n        d[\"next\"] = function() {\n            this._i += 1;\n            if (this._i >= this._keys.length) {\n                return {\n                    \"done\": true\n                };\n            }\n            return {\n                \"done\": false,\n                \"value\": s[this._keys[this._i]]\n            };\n        };\n        return d;\n    })();\n};\nif (typeof Set !== \"function\" || typeof Set.prototype.delete !== \"function\") {\n    _$rapyd$_set_implementation = _$rapyd$_set_polyfill;\n} else {\n    _$rapyd$_set_implementation = Set;\n}\nfunction _$rapyd$_set(iterable) {\n    var ans, s, iterator, result, k;\n    if (this instanceof _$rapyd$_set) {\n        this.jsset = new _$rapyd$_set_implementation();\n        ans = this;\n        if (iterable === undefined) {\n            return ans;\n        }\n        s = ans.jsset;\n        if (Array.isArray(iterable) || typeof iterable === \"string\") {\n            for (var i = 0; i < iterable.length; i++) {\n                s.add(iterable[i]);\n            }\n        } else if (typeof iterable[_$rapyd$_iterator_symbol] === \"function\") {\n            iterator = (typeof Map === \"function\" && iterable instanceof Map) ? iterable.keys() : iterable[_$rapyd$_iterator_symbol]();\n            result = iterator.next();\n            while (!result.done) {\n                s.add(result.value);\n                result = iterator.next();\n            }\n        } else {\n            var _$rapyd$_Iter0 = _$rapyd$_Iterable(Object.keys(iterable));\n            for (var _$rapyd$_Index0 = 0; _$rapyd$_Index0 < _$rapyd$_Iter0.length; _$rapyd$_Index0++) {\n                k = _$rapyd$_Iter0[_$rapyd$_Index0];\n                s.add(k);\n            }\n        }\n        return ans;\n    } else {\n        return new _$rapyd$_set(iterable);\n    }\n}\n_$rapyd$_set.prototype.__name__ = \"set\";\nObject.defineProperties(_$rapyd$_set.prototype, {\n    \"length\": {\n        \"get\": function() {\n            return this.jsset.size;\n        }\n    },\n    \"size\": {\n        \"get\": function() {\n            return this.jsset.size;\n        }\n    }\n});\n_$rapyd$_set.prototype.__len__ = function() {\n    return this.jsset.size;\n};\n_$rapyd$_set.prototype.has = _$rapyd$_set.prototype.__contains__ = function(x) {\n    return this.jsset.has(x);\n};\n_$rapyd$_set.prototype.add = function(x) {\n    this.jsset.add(x);\n};\n_$rapyd$_set.prototype.clear = function() {\n    this.jsset.clear();\n};\n_$rapyd$_set.prototype.copy = function() {\n    return _$rapyd$_set(this);\n};\n_$rapyd$_set.prototype.discard = function(x) {\n    this.jsset.delete(x);\n};\n_$rapyd$_set.prototype[_$rapyd$_iterator_symbol] = function() {\n    return this.jsset.values();\n};\n_$rapyd$_set.prototype.difference = function() {\n    var ans, s, iterator, r, x, has;\n    ans = new _$rapyd$_set();\n    s = ans.jsset;\n    iterator = this.jsset.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        has = false;\n        for (var i = 0; i < arguments.length; i++) {\n            if (arguments[i].has(x)) {\n                has = true;\n                break;\n            }\n        }\n        if (!has) {\n            s.add(x);\n        }\n        r = iterator.next();\n    }\n    return ans;\n};\n_$rapyd$_set.prototype.difference_update = function() {\n    var s, remove, iterator, r, x;\n    s = this.jsset;\n    remove = [];\n    iterator = s.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        for (var i = 0; i < arguments.length; i++) {\n            if (arguments[i].has(x)) {\n                remove.push(x);\n                break;\n            }\n        }\n        r = iterator.next();\n    }\n    for (var i = 0; i < remove.length; i++) {\n        s.delete(remove[i]);\n    }\n};\n_$rapyd$_set.prototype.intersection = function() {\n    var ans, s, iterator, r, x, has;\n    ans = new _$rapyd$_set();\n    s = ans.jsset;\n    iterator = this.jsset.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        has = true;\n        for (var i = 0; i < arguments.length; i++) {\n            if (!arguments[i].has(x)) {\n                has = false;\n                break;\n            }\n        }\n        if (has) {\n            s.add(x);\n        }\n        r = iterator.next();\n    }\n    return ans;\n};\n_$rapyd$_set.prototype.intersection_update = function() {\n    var s, remove, iterator, r, x;\n    s = this.jsset;\n    remove = [];\n    iterator = s.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        for (var i = 0; i < arguments.length; i++) {\n            if (!arguments[i].has(x)) {\n                remove.push(x);\n                break;\n            }\n        }\n        r = iterator.next();\n    }\n    for (var i = 0; i < remove.length; i++) {\n        s.delete(remove[i]);\n    }\n};\n_$rapyd$_set.prototype.isdisjoint = function(other) {\n    var iterator, r, x;\n    iterator = this.jsset.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        if (other.has(x)) {\n            return false;\n        }\n        r = iterator.next();\n    }\n    return true;\n};\n_$rapyd$_set.prototype.issubset = function(other) {\n    var iterator, r, x;\n    iterator = this.jsset.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        if (!other.has(x)) {\n            return false;\n        }\n        r = iterator.next();\n    }\n    return true;\n};\n_$rapyd$_set.prototype.issuperset = function(other) {\n    var s, iterator, r, x;\n    s = this.jsset;\n    iterator = other.jsset.values();\n    r = iterator.next();\n    while (!r.done) {\n        x = r.value;\n        if (!s.has(x)) {\n            return false;\n        }\n        r = iterator.next();\n    }\n    return true;\n};\n_$rapyd$_set.prototype.pop = function() {\n    var iterator, r;\n    iterator = this.jsset.values();\n    r = iterator.next();\n    if (r.done) {\n        throw new KeyError(\"pop from an empty set\");\n    }\n    this.jsset.delete(r.value);\n    return r.value;\n};\n_$rapyd$_set.prototype.remove = function(x) {\n    if (!this.jsset.delete(x)) {\n        throw new KeyError(x.toString());\n    }\n};\n_$rapyd$_set.prototype.symmetric_difference = function(other) {\n    return this.union(other).difference(this.intersection(other));\n};\n_$rapyd$_set.prototype.symmetric_difference_update = function(other) {\n    var common;\n    common = this.intersection(other);\n    this.update(other);\n    this.difference_update(common);\n};\n_$rapyd$_set.prototype.union = function() {\n    var ans;\n    ans = _$rapyd$_set(this);\n    ans.update.apply(ans, arguments);\n    return ans;\n};\n_$rapyd$_set.prototype.update = function() {\n    var s, iterator, r;\n    s = this.jsset;\n    for (var i=0; i < arguments.length; i++) {\n        iterator = arguments[i][_$rapyd$_iterator_symbol]();\n        r = iterator.next();\n        while (!r.done) {\n            s.add(r.value);\n            r = iterator.next();\n        }\n    }\n};\n_$rapyd$_set.prototype.toString = function() {\n    return \"{\" + list(this).join(\", \") + \"}\";\n};\n_$rapyd$_set.prototype.inspect = _$rapyd$_set.prototype.toString;\n_$rapyd$_set.prototype.__eq__ = function(other) {\n    var iterator, r;\n    if (!(other instanceof this.constructor)) {\n        return false;\n    }\n    if (other.size !== this.size) {\n        return false;\n    }\n    if (other.size === 0) {\n        return true;\n    }\n    iterator = other[_$rapyd$_iterator_symbol]();\n    r = iterator.next();\n    while (!r.done) {\n        if (!this.has(r.value)) {\n            return false;\n        }\n        r = iterator.next();\n    }\n    return true;\n};\nfunction _$rapyd$_set_wrap(x) {\n    var ans;\n    ans = new _$rapyd$_set();\n    ans.jsset = x;\n    return ans;\n}\nvar set = _$rapyd$_set, set_wrap = _$rapyd$_set_wrap;",
  "errors": "var Exception = Error;\nfunction AttributeError() {\n    AttributeError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(AttributeError, Error);\nAttributeError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = new Error().stack;\n};\nAttributeError.prototype.name = \"AttributeError\";\n\nfunction IndexError() {\n    IndexError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(IndexError, Error);\nIndexError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = new Error().stack;\n};\nIndexError.prototype.name = \"IndexError\";\n\nfunction KeyError() {\n    KeyError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(KeyError, Error);\nKeyError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = new Error().stack;\n};\nKeyError.prototype.name = \"KeyError\";\n\nfunction ValueError() {\n    ValueError.prototype.__init__.apply(this, arguments);\n}\n_$rapyd$_extends(ValueError, Error);\nValueError.prototype.__init__ = function __init__(msg) {\n    var self = this;\n    self.message = msg;\n    self.stack = new Error().stack;\n};\nValueError.prototype.name = \"ValueError\";\n",
  "itertools": "function sum(iterable, start) {\n    var ans, iterator, r;\n    if (Array.isArray(iterable)) {\n        return iterable.reduce(function(prev, cur) {\n            return prev + cur;\n        }, start || 0);\n    }\n    ans = start || 0;\n    iterator = iter(iterable);\n    r = iterator.next();\n    while (!r.done) {\n        ans += r.value;\n        r = iterator.next();\n    }\n    return ans;\n}\nfunction map() {\n    var func, iterators, args;\n    func = arguments[0];\n    iterators = new Array(arguments.length - 1);\n    args = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n        iterators[i - 1] = iter(arguments[i]);\n    }\n    return (function(){\n        var d = {};\n        d[\"_func\"] = func;\n        d[\"_iterators\"] = iterators;\n        d[\"_args\"] = args;\n        d[\"next\"] = function() {\n            var r;\n            for (var i = 0; i < this._iterators.length; i++) {\n                r = this._iterators[i].next();\n                if (r.done) {\n                    return {\n                        \"done\": true\n                    };\n                }\n                this._args[i] = r.value;\n            }\n            return {\n                \"done\": false,\n                \"value\": this._func.apply(undefined, this._args)\n            };\n        };\n        d[_$rapyd$_iterator_symbol] = function() {\n            return this;\n        };\n        return d;\n    })();\n}\nfunction filter(func_or_none, iterable) {\n    return (function(){\n        var d = {};\n        d[\"_iterator\"] = iter(iterable);\n        d[\"_func\"] = (func_or_none === null) ? bool : func_or_none;\n        d[\"next\"] = function() {\n            var r;\n            r = this._iterator.next();\n            while (!r.done) {\n                if (this._func(r.value)) {\n                    return r;\n                }\n                r = this._iterator.next();\n            }\n            return {\n                \"done\": true\n            };\n        };\n        d[_$rapyd$_iterator_symbol] = function() {\n            return this;\n        };\n        return d;\n    })();\n}\nfunction zip() {\n    var iterators;\n    iterators = new Array(arguments.length);\n    for (var i = 0; i < arguments.length; i++) {\n        iterators[i] = iter(arguments[i]);\n    }\n    return (function(){\n        var d = {};\n        d[\"_iterators\"] = iterators;\n        d[\"next\"] = function() {\n            var args, r;\n            args = new Array(this._iterators.length);\n            for (var i = 0; i < this._iterators.length; i++) {\n                r = this._iterators[i].next();\n                if (r.done) {\n                    return {\n                        \"done\": true\n                    };\n                }\n                args[i] = r.value;\n            }\n            return {\n                \"done\": false,\n                \"value\": args\n            };\n        };\n        d[_$rapyd$_iterator_symbol] = function() {\n            return this;\n        };\n        return d;\n    })();\n}"
}