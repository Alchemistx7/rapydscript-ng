{
  "abs()": "function abs() {\n            return Math.abs;\n        }",
  "max()": "function max() {\n            return Math.max;\n        }",
  "min()": "function min() {\n            return Math.min;\n        }",
  "bind": "function _$rapyd$_bind(fn, thisArg) {\n            var ret;\n            if (fn.orig) {\n                fn = fn.orig;\n            }\n            if (thisArg === false) {\n                return fn;\n            }\n            ret = function() {\n                return fn.apply(thisArg, arguments);\n            };\n            ret.orig = fn;\n            return ret;\n        }",
  "rebind_all": "function _$rapyd$_rebind_all(thisArg, rebind) {\n            if (typeof rebind === \"undefined\") {\n                rebind = true;\n            }\n            for (var p in thisArg) {\n                if (thisArg[p] && thisArg[p].orig) {\n                    if (rebind) {\n                        thisArg[p] = _$rapyd$_bind(thisArg[p], thisArg);\n                    } else {\n                        thisArg[p] = thisArg[p].orig;\n                    }\n                }\n            }\n        }",
  "dir": "function dir(item) {\n            var arr;\n            arr = [];\n            for (var i in item) {\n                arr.push(i);\n            }\n            return arr;\n        }",
  "enumerate": "function enumerate(iterable) {\n            var iterator, ans, result, c, obj, arr;\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                arr = [];\n                for (var i=0;i<iterable.length;i++) {\n                    arr.push([ i, iterable[i] ]);\n                }\n                return arr;\n            }\n            if (typeof iterable[iterator_symbol] === \"function\") {\n                iterator = iterable[iterator_symbol]();\n                c = 0;\n                ans = [];\n                result = iterator.next();\n                if (iterable[iterator_symbol] === iterable.entries) {\n                    while (!result.done) {\n                        ans.push([ c, result.value[0] ]);\n                        result = iterator.next();\n                        c += 1;\n                    }\n                } else {\n                    while (!result.done) {\n                        ans.push([ c, result.value ]);\n                        result = iterator.next();\n                        c += 1;\n                    }\n                }\n                return ans;\n            }\n            obj = Object.keys(iterable);\n            arr = [];\n            for (var i=0;i<obj.length;i++) {\n                arr.push([ i, obj[i] ]);\n            }\n            return arr;\n        }",
  "iter": "function iter(iterable) {\n            var ans;\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                ans = {\n                    \"_i\": -1,\n                    \"next\": function() {\n                        this._i += 1;\n                        if (this._i < iterable.length) {\n                            return {\n                                \"done\": false,\n                                \"value\": iterable[this._i]\n                            };\n                        }\n                        return {\n                            \"done\": true\n                        };\n                    }\n                };\n                ans[iterator_symbol] = function() {\n                    return this;\n                };\n                return ans;\n            }\n            if (typeof iterable[iterator_symbol] === \"function\") {\n                return iterable[iterator_symbol]();\n            }\n            return iter(Object.keys(iterable));\n        }",
  "eslice": "function _$rapyd$_eslice(arr, step, start, end) {\n            var isString;\n            arr = arr.slice(0);\n            if (typeof arr === \"string\" || arr instanceof String) {\n                isString = true;\n                arr = arr.split(\"\");\n            }\n            if (step < 0) {\n                step = -step;\n                arr.reverse();\n                if (typeof start !== \"undefined\") {\n                    start = arr.length - start - 1;\n                }\n                if (typeof end !== \"undefined\") {\n                    end = arr.length - end - 1;\n                }\n            }\n            if (typeof start === \"undefined\") {\n                start = 0;\n            }\n            if (typeof end === \"undefined\") {\n                end = arr.length;\n            }\n            arr = arr.slice(start, end).filter(function(e, i) {\n                return i % step === 0;\n            });\n            return isString ? arr.join(\"\") : arr;\n        }",
  "extends": "function _$rapyd$_extends(child, parent) {\n            child.prototype = Object.create(parent.prototype);\n            child.prototype.constructor = child;\n        }",
  "in": "function _$rapyd$_in(val, arr) {\n            if (Array.isArray(arr) || typeof arr === \"string\") {\n                return arr.indexOf(val) !== -1;\n            } else {\n                if (arr.hasOwnProperty(val)) {\n                    return true;\n                }\n                return false;\n            }\n        }",
  "iterable": "function _$rapyd$_Iterable(iterable) {\n            var iterator, ans, result;\n            if (Array.isArray(iterable) || typeof iterable === \"string\") {\n                return iterable;\n            }\n            if (typeof iterable[iterator_symbol] === \"function\") {\n                iterator = iterable[iterator_symbol]();\n                ans = [];\n                result = iterator.next();\n                if (iterable[iterator_symbol] === iterable.entries) {\n                    while (!result.done) {\n                        ans.push(result.value[0]);\n                        result = iterator.next();\n                    }\n                } else {\n                    while (!result.done) {\n                        ans.push(result.value);\n                        result = iterator.next();\n                    }\n                }\n                return ans;\n            }\n            return Object.keys(iterable);\n        }",
  "len()": "function _$rapyd$_len() {\n            if (typeof Set === \"function\" && typeof Map === \"function\") {\n                return function(obj) {\n                    if (Array.isArray(obj) || typeof obj === \"string\") {\n                        return obj.length;\n                    }\n                    if (obj instanceof Set || obj instanceof Map) {\n                        return obj.size;\n                    }\n                    return Object.keys(obj).length;\n                };\n            }\n            return function(obj) {\n                if (Array.isArray(obj) || typeof obj === \"string\") {\n                    return obj.length;\n                }\n                return Object.keys(obj).length;\n            };\n        }",
  "mixin": "function _$rapyd$_mixin(target, source, overwrite) {\n            for (var i in source) {\n                if (source.hasOwnProperty(i) && overwrite || typeof target[i] === \"undefined\") {\n                    target[i] = source[i];\n                }\n            }\n        }",
  "print": "function _$rapyd$_print() {\n            if (typeof console === \"object\") {\n                console.log.apply(console, arguments);\n            }\n        }",
  "range": "function range(start, stop, step) {\n            var length, idx, r;\n            if (arguments.length <= 1) {\n                stop = start || 0;\n                start = 0;\n            }\n            step = arguments[2] || 1;\n            length = Math.max(Math.ceil((stop - start) / step), 0);\n            idx = 0;\n            r = new Array(length);\n            while (idx < length) {\n                r[idx++] = start;\n                start += step;\n            }\n            return r;\n        }",
  "reversed": "function reversed(iterable) {\n            var iterator, ans, result;\n            if (Array.isArray(iterable)) {\n                return iterable.reverse();\n            }\n            if (typeof iterable[iterator_symbol] === \"function\") {\n                iterator = iterable[iterator_symbol]();\n                ans = [];\n                result = iterator.next();\n                if (iterable[iterator_symbol] === iterable.entries) {\n                    while (!result.done) {\n                        ans.push(result.value[0]);\n                        result = iterator.next();\n                    }\n                } else {\n                    while (!result.done) {\n                        ans.push(result.value);\n                        result = iterator.next();\n                    }\n                }\n                return ans.reverse();\n            }\n            if (typeof iterable === \"string\") {\n                return iterable.split(\"\").reverse().join(\"\");\n            }\n            return Object.keys(iterable).reverse();\n        }",
  "sum": "function sum() {\n            var arr = ( 0 === arguments.length-1 && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [symbolfor(\"_$rapyd$_kwargs_obj\")] === true) ? undefined : arguments[0];\n            var start = (arguments[1] === undefined || ( 1 === arguments.length-1 && typeof arguments[arguments.length-1] === \"object\" && arguments[arguments.length-1] [symbolfor(\"_$rapyd$_kwargs_obj\")] === true)) ? (0) : arguments[1];\n            var _$rapyd$_kwargs_obj = arguments[arguments.length-1];\n            if (typeof _$rapyd$_kwargs_obj !== \"object\" || _$rapyd$_kwargs_obj [symbolfor(\"_$rapyd$_kwargs_obj\")] !== true) _$rapyd$_kwargs_obj = {};\n            if (Object.prototype.hasOwnProperty.call(_$rapyd$_kwargs_obj, \"start\")){\n                start = _$rapyd$_kwargs_obj.start;\n            }\n            return arr.reduce(function(prev, cur) {\n                return prev + cur;\n            }, start);\n        }",
  "getattr": "function getattr(obj, name) {\n            return obj[name];\n        }",
  "setattr": "function setattr(obj, name, value) {\n            obj[name] = value;\n        }",
  "hasattr": "function hasattr(obj, name) {\n            return name in obj;\n        }",
  "symbolfor()": "function _$rapyd$_symbolfor_polyfill() {\n            if (typeof Symbol === \"function\" && typeof Symbol.for === \"function\") {\n                return Symbol.for;\n            }\n            return function(name) {\n                return name + \"-Symbol-\" + \"5d0927e5554349048cf0e3762a228256\";\n            };\n        }",
  "desugar_kwargs()": "function _$rapyd$_desugar_kwargs() {\n            if (Object.assign) {\n                return function() {\n                    var ans;\n                    ans = {};\n                    ans[symbolfor(\"_$rapyd$_kwargs_obj\")] = true;\n                    return Object.assign.apply(ans, arguments);\n                };\n            }\n            return function() {\n                var ans, prop;\n                ans = {};\n                ans[symbolfor(\"_$rapyd$_kwargs_obj\")] = true;\n                for (var i = 0; i < arguments.length; i++) {\n                    var _$rapyd$_Iter1 = _$rapyd$_Iterable(Object.keys(arguments[i]));\n                    for (var _$rapyd$_Index1 = 0; _$rapyd$_Index1 < _$rapyd$_Iter1.length; _$rapyd$_Index1++) {\n                        prop = _$rapyd$_Iter1[_$rapyd$_Index1];\n                        ans[prop] = arguments[i][prop];\n                    }\n                }\n                return ans;\n            };\n        }"
}