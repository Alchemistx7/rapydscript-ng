# arithmetic
assert.equal(3**4, Math.pow(3, 4))
assert.equal(100**-2, Math.pow(100, -2))
assert.equal(2*5**2*3, 150)
assert.equal(100 // 3, 33)
assert.equal(-100 // 3, -34)
a = 100
a //= 3
assert.equal(a, 33)

# comparisons
assert.ok(3<5<7)

# Empty tuple
assert.deepEqual((), [])

# Conditional operators
assert.equal((True) ? 1: 2, 1)
assert.equal(1 if True else 2, 1)
assert.equal(1
             if True else 2, 1)
assert.deepEqual([x for x in ("asd" if True else "xyz") if x], 'asd'.split(''))
assert.deepEqual((1, [x for x in [2] if x]), [1, [2]])

# Comprehensions
assert.deepEqual([a+1 for a in [1,2,3] if a > 1], [3, 4])
assert.deepEqual({a+1:a+2 for a in [1,2,3] if a > 1}, {3:4, 4:5})
assert.deepEqual({a+1 for a in [1,2,3] if a > 1}, set([3, 4]))
assert.deepEqual([(a+1, 1) for a in [1,2,3] if a > 1], [[3, 1], [4, 1]])

# Destructuring assignment
a, (b, (c, d)), e = [1, [2, [3, 4]], 5]
assert.deepEqual([a, b, c, d, e], [1, 2, 3, 4, 5])
for x, (y, z) in [ [1, [2, 3]] ]:
    assert.deepEqual([x, y, z], [1, 2, 3])
assert.deepEqual([ [x, y, z, w] for ((x, y), (z, w)) in [ [[1, 2], [3, 4]] ] ],
                 [[1, 2, 3, 4]])
assert.deepEqual([ [x, y, z] for x, (y, z) in [ [1, [2, 3] ] ]],
                 [[1, 2, 3]])

# strict equality
assert(1 == 1)                  # number vs number: ok
assert(True == True)            # boolean vs boolean: ok
assert(not (1 == True))         # number vs boolean: NEVER equal
assert(1 != True)               # number vs boolean: NEVER equal
assert(not ("" == False))       # string vs boolean: NEVER equal
assert(not ("0" == 0))          # string vs integer: NEVER equal
assert(not ("" == 0))           # string vs integer: NEVER equal
assert(bool(1) == True)         # boolean conversion
assert(bool("") == False)       # boolean conversion
assert(JS('1 == true'))         # javascript override
assert(not JS('(1 != true)'))   # javascript override
assert(JS('String("test")') == "test")  # this should do string conversion rather than creating a string object
assert(String("test") != "test")        # this should create a string object


# raw JavaScript
JS('var def = {}')                # ability to bypass reserved keywords in declaration
JS('def').item = 3            # ability to use reserved keywords
assert(JS('def.item') == 3)

n = 5
assert(JS("""
(function() {
    var s = 0
    for (var i=0; i<=n; i++) {
        s += i
    }
    return s
})()
""") == (def():
    s = 0
    for i in [0 to n]:
        s += i
    return s
)())                        # shared scoping and equivalent capability
