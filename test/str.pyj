# vim:fileencoding=utf-8
# License: BSD
# Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

# Test literals

assert.equal(r'\n', '\\n')
assert.equal('\n'.charCodeAt(0), 10)
assert.equal('\'', "'")
assert.equal('\76'.charCodeAt(0), 62)  # octal escapes
assert.equal('\x2a'.charCodeAt(0), 0x2a)  # hex escapes
assert.equal('\u2028'.charCodeAt(0), 0x2028)
assert.equal("\U0001F431", '🐱')
assert.equal("\U0001F431", '🐱')
assert.equal("\N{nbsp}", '\u00a0')
assert.equal("\N{NBSp}", '\u00a0')

# Test format()

def test():
    args = Array.prototype.slice.call(arguments, 1)
    assert.equal(arguments[0], str.format.apply(None, args))

def test_throws():
    args = Array.prototype.slice.call(arguments)
    def f():
        return str.format.apply(None, args[1:])
    assert.throws(f, args[0])

test(' 1 2', ' {} {}', 1, 2)
test('{ a ', '{{ {0} ', 'a')
test('11', '{0}{0}', 1)
test('12', '{a}{b}', a=1, b=2)
test('12', '{a}{0}', 2, a=1)
test('1', '{0[0]}', [1])
test('1', '{0.a.b}', {'a':{'b':1}})
test('1', '{0[a][b]}', {'a':{'b':1}})
test('x', '{}', def (): return 'x';)
test('11', '{:b}', 3)
test('0b11', '{:#b}', 3)
test('30,000', '{:,d}', 30000)
test('1.234568e+8', '{:e}', 123456789)
test('1.23E+8', '{:.2E}', 123456789)
test('12.35%', '{:.2%}', .123456789)
test('left aligned                  ', '{:<30}', 'left aligned')
test('                 right aligned', '{:>30}', 'right aligned')
test('           centered           ', '{:^30}', 'centered')
test('***********centered***********', '{:*^30}', 'centered')
test('+3.140000; -3.140000', '{:+f}; {:+f}', 3.14, -3.14)
test('3.140000; -3.140000', '{:-f}; {:-f}', 3.14, -3.14)
test(' 3.140000; -3.140000', '{: f}; {: f}', 3.14, -3.14)
test('int: 42;  hex: 2a;  oct: 52;  bin: 101010', "int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}", 42)
test('int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010', "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}", 42)
test('100', '{:{fill}{align}3}', 1, fill=0, align='<')
test_throws(AttributeError, '{0.a}', {})
test_throws(KeyError, '{a}', b=1)
test_throws(IndexError, '{} {}', 1)
test_throws(IndexError, '{1} {2}', 1)
test_throws(ValueError, '{1')
