# vim:fileencoding=utf-8
# globals: _$rapyd$_iterator_symbol

class CustomIterable:

    def __init__(self, items):
        self.items = items

    def __iter__(self):
        return iter(self.items)

t = []
q = [1,2,3]
for x in CustomIterable(q):
    t.push(x)
assert.deepEqual(q, t)

assert.deepEqual(['a', 'b'], list('ab'))
assert.ok(q != list(q))
assert.deepEqual(q, list(q))
assert.ok(isinstance([], (String, list)))
m = Map()
m.set('a', 1)
assert.equal(len(m), 1)
s = Set()
s.add(1)
s.add(2)
assert.equal(len(s), 2)
assert.deepEqual(list(s), [1, 2])
assert.deepEqual(s, {1, 2})

t = []
for i in s:
    t.push(i)
assert.deepEqual(t, [1, 2])

t = []
for i in m:
    t.push(i)
assert.deepEqual(t, ['a'])
t = []
for c, i in enumerate(m):
    t.push([c, i])
assert.deepEqual(t, [[0, 'a']])
assert.deepEqual(['y', 'x'], [x for x in reversed('xy')])

# Test that the iterator created by iter() is itself iterable
assert.deepEqual(s, Set(iter(s)))

assert.ok('a' in m)
assert.ok(1 in s)
assert.ok('1' not in s)

# getattr()
a = {'x':2}
assert.equal(getattr(a, 'x'), 2)
assert.equal(getattr(a, 'x', 1), 2)
assert.equal(getattr(a, 'y', 1), 1)
assert.throws(def():getattr(a, 'y');, AttributeError)

# sum()
assert.equal(6, sum([1, 2, 3]))
assert.equal(6, sum(iter([1, 2, 3])))
assert.equal(5, sum([1, 2, 3], -1))
assert.equal(5, sum(iter([1, 2, 3]), -1))

# map()/filter()/zip()
assert.deepEqual(list(map(def(a):return a*2;, [1, 2])), [2, 4])
assert.deepEqual(list(map(def(a):return a*2;, iter([1, 2]))), [2, 4])
assert.deepEqual(list(filter(def(a):return a > 1;, [1, 2])), [2])
assert.deepEqual(list(filter(def(a):return a > 1;, iter([1, 2]))), [2])
assert.deepEqual(list(zip([1,2], [3,4])), [[1,3], [2, 4]])

# lists
a = [1, 2]
a.extend([3, 4])
assert.deepEqual(a, [1,2,3,4])
s = new Set([5, 6])
a.extend(s)
assert.deepEqual(a, [1,2,3,4,5,6])
a.extend('12')
assert.deepEqual(a, [1,2,3,4,5,6,'1','2'])
a = [1,2,3,4]
for index, val in [[0, 1], [1, 2], [3, 4]]:
    assert.equal(a.index(val), index)
assert.throws(def():a.index(8);, ValueError)
assert.throws(def():a.index(1, 1);, ValueError)
assert.throws(def():a.index(4, 1, 2);, ValueError)
assert.equal(1, a.index(2, 1, 2))
assert.throws(def():a.pypop(10);, IndexError)
assert.equal(a.pypop(-1), 4)
assert.deepEqual(a, [1,2,3])
assert.equal(a.remove(2), None)
assert.deepEqual(a, [1, 3])
assert.throws(def():a.remove(2);, ValueError)
a = [1,2]
a.insert(0, 0)
assert.deepEqual(a, [0, 1, 2])
a.insert(-1, 3)
assert.deepEqual(a, [0, 1, 3, 2])
a.insert(a.length, 6)
assert.deepEqual(a, [0, 1, 3, 2, 6])
assert.deepEqual(a.copy(), a)
assert.ok(a != a.copy())
assert.ok(a.copy().extend != undefined)
a.clear()
assert.equal(a.length, 0)
assert.deepEqual(a.as_array(), a)
assert.ok(a != a.as_array())
assert.ok(a.as_array().extend == undefined)
a = [1, 2, 1]
assert.equal(a.count(1), 2)
a = [3, 2, 4, 1]
a.pysort()
assert.deepEqual(a, [1,2,3,4])
a.pysort(reverse=True)
assert.deepEqual(a, [4,3,2,1])
assert.deepEqual(a, a.slice())
assert.ok(a != a.slice())
assert.ok(a.slice().extend != undefined)
assert.deepEqual(a, a.concat())
assert.ok(a != a.concat())
assert.ok(a.concat().extend != undefined)
assert.deepEqual(list(a[_$rapyd$_iterator_symbol]()), a)
assert.equal(a.length, a.__len__())
assert.equal(a.length, len(a))
assert.ok(a.__contains__(a[0]))
assert.ok([x for x in [1]].extend != undefined)

class C:
    def __contains__(self, x):
        return x == 1
assert.ok(1 in C())
assert.ok(2 not in C())
