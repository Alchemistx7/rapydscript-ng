# vim:fileencoding=utf-8

class CustomIterable:

    def __init__(self, items):
        self.items = items

    def __iter__(self):
        return iter(self.items)

t = []
q = [1,2,3]
for x in CustomIterable(q):
    t.push(x)
assert.deepEqual(q, t)

assert.deepEqual(['a', 'b'], list('ab'))
assert.ok(q != list(q))
assert.deepEqual(q, list(q))
assert.ok(isinstance([], (String, list)))
m = Map()
m.set('a', 1)
assert.equal(len(m), 1)
s = Set()
s.add(1)
s.add(2)
assert.equal(len(s), 2)
assert.deepEqual(list(s), [1, 2])
assert.deepEqual(s, {1, 2})

t = []
for i in s:
    t.push(i)
assert.deepEqual(t, [1, 2])

t = []
for i in m:
    t.push(i)
assert.deepEqual(t, ['a'])
t = []
for c, i in enumerate(m):
    t.push([c, i])
assert.deepEqual(t, [[0, 'a']])
assert.deepEqual(['y', 'x'], [x for x in reversed('xy')])

# Test that the iterator created by iter() is itself iterable
assert.deepEqual(s, Set(iter(s)))

assert.ok('a' in m)
assert.ok(1 in s)
assert.ok('1' not in s)

# getattr()
a = {'x':2}
assert.equal(getattr(a, 'x'), 2)
assert.equal(getattr(a, 'x', 1), 2)
assert.equal(getattr(a, 'y', 1), 1)
assert.throws(def():getattr(a, 'y');, AttributeError)

# sum()
assert.equal(6, sum([1, 2, 3]))
assert.equal(6, sum(iter([1, 2, 3])))
assert.equal(5, sum([1, 2, 3], -1))
assert.equal(5, sum(iter([1, 2, 3]), -1))

# map()/filter()/zip()
assert.deepEqual(list(map(def(a):return a*2;, [1, 2])), [2, 4])
assert.deepEqual(list(map(def(a):return a*2;, iter([1, 2]))), [2, 4])
assert.deepEqual(list(filter(def(a):return a > 1;, [1, 2])), [2])
assert.deepEqual(list(filter(def(a):return a > 1;, iter([1, 2]))), [2])
assert.deepEqual(list(zip([1,2], [3,4])), [[1,3], [2, 4]])
