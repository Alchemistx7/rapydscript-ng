# vim:fileencoding=utf-8
# globals: _$rapyd$_iterator_symbol, _$rapyd$_set_polyfill, _$rapyd$_dict_polyfill
nonlocal _$rapyd$_set_implementation, _$rapyd$_dict_implementation

class CustomIterable:

    def __init__(self, items):
        self.items = items

    def __iter__(self):
        return iter(self.items)

t = []
q = [1,2,3]
for x in CustomIterable(q):
    t.push(x)
assert.deepEqual(q, t)

assert.deepEqual(['a', 'b'], list('ab'))
assert.ok(q is not list(q))
assert.deepEqual(q, list(q))
assert.ok(isinstance([], (String, list)))
m = Map()
m.set('a', 1)
assert.equal(len(m), 1)
s = set()
s.add(1)
s.add(2)
assert.equal(len(s), 2)
assert.deepEqual(list(s), [1, 2])
assert.deepEqual(s, {1, 2})

assert.equal(chr(ord('a')), 'a')
assert.equal(chr(ord('🐱')), '🐱')
assert.equal(bin(3), '0b11')
assert.equal(bin(-3), '-0b11')
assert.equal(hex(10), '0xa')
assert.equal(hex(-10), '-0xa')
t = []
for i in s:
    t.push(i)
assert.deepEqual(t, [1, 2])

t = []
for i in m:
    t.push(i)
assert.deepEqual(t, ['a'])
t = []
for c, i in enumerate(m):
    t.push([c, i])
assert.deepEqual(t, [[0, 'a']])
assert.deepEqual(['y', 'x'], [x for x in reversed('xy')])

# Test that the iterator created by iter() is itself iterable
assert.deepEqual(s, set(iter(s)))

assert.ok('a' in m)
assert.ok(1 in s)
assert.ok('1' not in s)

# getattr()
a = {'x':2}
assert.equal(getattr(a, 'x'), 2)
assert.equal(getattr(a, 'x', 1), 2)
assert.equal(getattr(a, 'y', 1), 1)
assert.throws(def():getattr(a, 'y');, AttributeError)

# int()/float()
assert.equal(int('a', 16), 10)
assert.throws(def ():int('a');, ValueError)
assert.equal(float('10.3'), 10.3)
assert.throws(def ():float('a');, ValueError)

# sum()
assert.equal(6, sum([1, 2, 3]))
assert.equal(6, sum(iter([1, 2, 3])))
assert.equal(5, sum([1, 2, 3], -1))
assert.equal(5, sum(iter([1, 2, 3]), -1))

# map()/filter()/zip()
assert.deepEqual(list(map(def(a):return a*2;, [1, 2])), [2, 4])
assert.deepEqual(list(map(def(a):return a*2;, iter([1, 2]))), [2, 4])
assert.deepEqual(list(filter(def(a):return a > 1;, [1, 2])), [2])
assert.deepEqual(list(filter(def(a):return a > 1;, iter([1, 2]))), [2])
assert.deepEqual(list(zip([1,2], [3,4])), [[1,3], [2, 4]])

# lists
a = [1, 2]
a.extend([3, 4])
assert.deepEqual(a, [1,2,3,4])
assert.ok(a == [1,2,3,4])
s = set([5, 6])
a.extend(s)
assert.deepEqual(a, [1,2,3,4,5,6])
a.extend('12')
assert.deepEqual(a, [1,2,3,4,5,6,'1','2'])
a = [1,2,3,4]
for index, val in [[0, 1], [1, 2], [3, 4]]:
    assert.equal(a.index(val), index)
assert.throws(def():a.index(8);, ValueError)
assert.throws(def():a.index(1, 1);, ValueError)
assert.throws(def():a.index(4, 1, 2);, ValueError)
assert.equal(1, a.index(2, 1, 2))
assert.throws(def():a.pypop(10);, IndexError)
assert.equal(a.pypop(-1), 4)
assert.deepEqual(a, [1,2,3])
assert.equal(a.remove(2), None)
assert.deepEqual(a, [1, 3])
assert.throws(def():a.remove(2);, ValueError)
a = [1,2]
a.insert(0, 0)
assert.deepEqual(a, [0, 1, 2])
a.insert(-1, 3)
assert.deepEqual(a, [0, 1, 3, 2])
a.insert(a.length, 6)
assert.deepEqual(a, [0, 1, 3, 2, 6])
assert.deepEqual(a.copy(), a)
assert.ok(a is not a.copy())
assert.ok(a.copy().extend is not undefined)
a.clear()
assert.equal(a.length, 0)
assert.deepEqual(a.as_array(), a)
assert.ok(a is not a.as_array())
assert.ok(a.as_array().extend == undefined)
a = [1, 2, 1]
assert.equal(a.count(1), 2)
a = [3, 2, 4, 1]
a.pysort()
assert.deepEqual(a, [1,2,3,4])
a.pysort(reverse=True)
assert.deepEqual(a, [4,3,2,1])
assert.deepEqual(a, a.slice())
assert.ok(a is not a.slice())
assert.ok(a.slice().extend is not undefined)
assert.deepEqual(a, a.concat())
assert.ok(a is not a.concat())
assert.ok(a.concat().extend is not undefined)
assert.deepEqual(list(a[_$rapyd$_iterator_symbol]()), a)
assert.equal(a.length, a.__len__())
assert.equal(a.length, len(a))
assert.ok(a.__contains__(a[0]))
assert.ok([x for x in [1]].extend is not undefined)

class C:
    def __contains__(self, x):
        return x == 1
assert.ok(1 in C())
assert.ok(2 not in C())

# sets
def test_sets():
    a = set([1, 2, 3])
    assert.ok(isinstance(a, set))
    assert.ok(a.has(1))
    assert.ok(not a.has(9))
    assert.deepEqual(a, {1,2,3})
    assert.ok(len(a) == 3)
    assert.ok(a.length == 3)
    assert.ok(a.size == 3)
    assert.ok(not a.has('1'))
    x = a.copy()
    assert.deepEqual(a, x)
    assert.ok(a is not x)
    b, c = {}, {}
    a.add(b)
    assert.ok(b in a)
    assert.ok(c not in a)
    assert.ok(None not in a)
    a.add(None)
    assert.ok(None in a)
    a.discard(None)
    assert.ok(None not in a)
    a.clear()
    assert.ok(a.length == 0)
    assert.deepEqual({1,2,3}.difference({2}, {3}), {1})
    a = {1, 2, 3}
    a.difference_update({2}, {3})
    assert.deepEqual(a, {1})
    assert.deepEqual({1,2,3}.intersection({2, 3}, {3}), {3})
    a = {1, 2, 3}
    a.intersection_update({2, 3}, {3})
    assert.deepEqual(a, {3})
    assert.ok({1}.isdisjoint({2}))
    assert.ok(not {1}.isdisjoint({1}))
    assert.ok({1}.issubset({1, 2}))
    assert.ok({1}.issubset({1}))
    assert.ok(not {1}.issubset({2}))
    assert.ok({1, 2}.issuperset({1, 2}))
    assert.ok({1, 2}.issuperset({1}))
    assert.ok(not {1}.issuperset({2}))
    a = set()
    assert.throws(def():a.pop();, KeyError)
    assert.equal({1}.pop(), 1)
    assert.throws(def ():a.remove(1);, KeyError)
    a = {1}
    a.remove(1)
    assert.equal(a.length, 0)
    assert.deepEqual({1,2,3}.symmetric_difference({2, 3, 4}), {1, 4})
    a = {1, 2, 3}
    a.symmetric_difference_update({2, 3, 4})
    assert.deepEqual(a, {1, 4})
    assert.deepEqual({1,2}.union({3, 4}, {1, 5}), {1, 2, 3, 4, 5})
    a = {1}
    a.update({1, 2})
    assert.deepEqual(a, {1, 2})

test_sets()
_$rapyd$_set_implementation = _$rapyd$_set_polyfill  # noqa:undef
test_sets()
_$rapyd$_set_implementation = Set

def test_dicts():
    assert.deepEqual({!1:1, 2:2}, {!1:1, 2:2})
    a = {!1:1, 2:2}
    assert.ok(isinstance(a, dict))
    assert.ok(1 in a), assert.ok(3 not in a), assert.ok('1' not in a)
    assert.deepEqual(set(a), {1, 2})
    assert.ok(set(a) == {1, 2})
    assert.equal({!1:2}[!1], 2)
    assert.throws(def():a[!'1'];, KeyError)
    assert.equal(a.length, 2), assert.equal(len(a), 2)
    assert.equal(a[!1], 1)
    a[!1] = 3
    assert.equal(a[!1], 3)
    assert.ok(a is not a.copy()), assert.deepEqual(a, a.copy())
    a.clear()
    assert.equal(a.length, 0), assert.deepEqual(list(a), [])
    assert.deepEqual(set({!1:9, 2:8}.keys()), {1, 2})
    assert.deepEqual(set({!1:9, 2:8}.values()), {8, 9})
    items = [list_wrap(x) for x in {!1:9, 2:8}.items()]
    items.sort()
    assert.deepEqual(items, [[1,9], [2, 8]])
    a = {!1:1, 2:2}
    assert.equal(a.get(1), 1), assert.equal(a.get(3), None)
    assert.equal(a.set_default(2, 2), 2)
    assert.equal(a.set_default(3, 3), 3), assert.equal(a[!3], 3)
    assert.deepEqual(dict.fromkeys([1, 2], 3), {!1:3, 2:3})
    a = {!1:3, 2:3}
    assert.equal(a.pop(2, 2), 3), assert.equal(a.pop(2, 2), 2)
    assert.throws(def(): a.pop(2);, KeyError)
    assert.deepEqual(a.popitem(), v'[1, 3]')
    assert.throws(def():a.popitem();, KeyError)
    a = {!1:1}
    a.update({!2:2, 1:3})
    assert.deepEqual(a, {!1:3, 2:2})

test_dicts()
_$rapyd$_dict_implementation = _$rapyd$_dict_polyfill  # noqa:undef
test_dicts()
_$rapyd$_dict_implementation = Map
