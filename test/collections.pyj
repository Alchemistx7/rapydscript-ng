# ARRAYS

# immutables
a = [4,5,6,7]

# mutables
class Item:
    pass
i0 = Item()
i1 = Item()
i2 = Item()
b = [i0, i1]

# access and slicing
assert.equal(len(a), 4)
assert.equal(a[-1], 7)
assert.equal(a[-2], 6)
assert.deepEqual(a[1:3], [5,6])
assert.deepEqual(a[:3], [4,5,6])
assert.deepEqual(a[2:], [6,7])
assert.ok(7 in a)
assert.ok(i1 in b)
assert.ok(i2 not in b)
assert.ok(b == b.copy())
assert.ok([1] in [[1], [2]])
assert.ok([3] not in [[1], [2]])

# assignment
a[-1] = 9
assert.equal(a[-1], 9)

# extended slices
b = list(range(11))
s = 'abcde'
assert.deepEqual(b[::2], [0, 2, 4, 6, 8, 10])
assert.deepEqual(b[::-1], list(range(10,-1,-1)))
assert.deepEqual(b[7:0:-1], [7, 6, 5, 4, 3, 2, 1])
assert.deepEqual(b[7:1:-2], [7, 5, 3])
assert.equal(s[::2], 'ace')
assert.equal(s[::-1], 'edcba')
assert.equal(s[4:0:-1], 'edcb')
assert.equal(s[4:1:-2], 'ec')

# strings
assert.ok("tes" in "this is a test")

one = "one"
two = "two"
one, two = two, one
[x, y, z] = 'x', 'y', 'z'
assert.equal(one, "two")
assert.equal(two, "one")
assert.equal(x, 'x')
assert.equal(y, 'y')
assert.equal(z, 'z')


# DICTIONARIES
d0 = {'a':'b','c':2, 'd':		'd',}
d1 = {
	'foo': 1,
	"bar": "baz",
	"fun1": def():
		return 5
	,
	'fun2': def(c):
		return c+1
}

# access
assert.ok('foo' in d1)
assert.equal(d0.a, d0['a'])
assert.equal(d1['fun1'](), 5)
assert.equal(d1.fun2(3), 4)
assert.equal(len(d0), 3)

# assignment
d1["bar"] += "!"
assert.equal(d1.bar, "baz!")

# nested comparisons
x = 3
assert.ok(1 < x <= 3)
assert.ok(1 < x*x > 3)
assert.ok(1 < (x+=1) < 5) # check that only one increment occurs
assert.equal(x, 4)

# list comprehensions
e0 = [i*i for i in [0,1,2,3]]
e1 = [x+y for x, y in enumerate(range(5,0,-1))]
e2 = [e0+1 for e0 in range(6) if e0%3]
assert.deepEqual(e0, [0,1,4,9])
assert.deepEqual(e1, [5,5,5,5,5])
assert.deepEqual(e2, [2,3,5,6])
hash = {
    "foo": 1,
    "bar": 1,
    "baz": 1,
}
assert.deepEqual(Object.keys(hash), [k for k in hash])
