# A RapydScript to JavaScript compiler.
# https://github.com/atsepkov/RapydScript
#
# -------------------------------- (C) ---------------------------------
#
#                      Author: Alexander Tsepkov
#                        <atsepkov@pyjeon.com>
#                        http://www.pyjeon.com
# License: BSD

"use strict"

{
"abs": def abs(n):
    return Math.abs(n)
,
"bind": def _$rapyd$_bind(fn, thisArg):
    if fn.orig: fn = fn.orig
    if thisArg == False: return fn
    ret = def():
        return fn.apply(thisArg, arguments)
    ret.orig = fn
    return ret
,
"rebind_all": def _$rapyd$_rebindAll(thisArg, rebind):
    if JS('typeof rebind') == "undefined": rebind = True
    for JS('var p in thisArg'):
        if thisArg[p] and thisArg[p].orig:
            if rebind: thisArg[p] = _$rapyd$_bind(thisArg[p], thisArg)
            else: thisArg[p] = thisArg[p].orig
,
"dir": def dir(item):
    # TODO: this isn't really representative of real Python's dir(), nor is it
    # an intuitive replacement for "for ... in" loop, need to update this logic
    # and introduce a different way of achieving "for ... in"
    arr = []
    for JS('var i in item'): arr.push(i)
    return arr
,
"enumerate": def enumerate(item):
    arr = []
    for JS('var i=0;i<item.length;i++'): arr[arr.length] = [i, item[i]]
    return arr
,
"eslice": def _$rapyd$_eslice(arr, step, start, end):
    arr = arr[:]
    if type(arr) == 'string' or isinstance(arr, String):
        isString = True
        arr = arr.split('')

    if step < 0:
        step = -step
        arr.reverse()
        if type(start) != "undefined": start = arr.length - start - 1
        if type(end) != "undefined": end = arr.length - end - 1
    if type(start) == "undefined": start = 0
    if type(end) == "undefined": end = arr.length

    arr = arr.slice(start, end).filter(def(e, i): return i % step == 0;)
    return isString ? arr.join('') : arr
,
"extends": def _$rapyd$_extends(child, parent):
    child.prototype = Object.create(parent.prototype)
    child.prototype.constructor = child
,
"in": def _$rapyd$_in(val, arr):
    if Array.isArray(arr) or JS('typeof arr') == 'string': return arr.indexOf(val) != -1
    else:
        if arr.hasOwnProperty(val): return True
        return False
,
"iterable": def _$rapyd$_Iterable(iterable):
    if Array.isArray(iterable) or isinstance(iterable, String) or JS('typeof iterable') == 'string': return iterable
    return Object.keys(iterable)    # so we can use 'for ... in' syntax with hashes
,
"len": def len(obj):
    if Array.isArray(obj) or JS('typeof obj') == 'string': return obj.length
    return Object.keys(obj).length
,
"mixin": def _$rapyd$_mixin(target, source, overwrite):
    for JS('var i in source'):
        if source.hasOwnProperty(i) and overwrite or JS('typeof target[i]') == 'undefined': target[i] = source[i]
,
"print": def _$rapyd$_print():
    if JS('typeof console') == 'object':
        console.log.apply(console, arguments)
,
"range": def range(start, stop, step):
    if arguments.length <= 1:
        stop = start or 0
        start = 0
    step = arguments[2] or 1

    length = Math.max(Math.ceil((stop - start) / step), 0)
    idx = 0
    range = Array(length)

    while idx < length:
        range[JS('idx++')] = start
        start += step
    return range
,
"reversed": def reversed(arr):
    tmp = arr[:]
    return tmp.reverse()
,
"sum": def sum(arr, start=0):
    return arr.reduce(
        def(prev, cur): return prev+cur
        ,
        start
    )
,
"getattr": def getattr(obj, name):
    return obj[name]
,
"setattr": def setattr(obj, name, value):
    obj[name] = value
,
"hasattr": def hasattr(obj, name):
    return JS('name in obj')
,
"symbolfor()": def _$rapyd$_symbolfor_polyfill():
    if typeof Symbol == 'function' and typeof Symbol.for == 'function':
        return Symbol.for
    return (def(name):
            return name + '-Symbol-' + '5d0927e5554349048cf0e3762a228256'
    )
,
"desugar_kwargs()": def _$rapyd$_desugar_kwargs():
    if Object.assign:
        return def():
            ans = {}
            ans[symbolfor('_$rapyd$_kwargs_obj')] = True
            return Object.assign.apply(ans, arguments)
    return def():
        ans = {}
        ans[symbolfor('_$rapyd$_kwargs_obj')] = True
        for JS('var i = 0; i < arguments.length; i++'):
            for prop in Object.keys(arguments[i]):
                ans[prop] = arguments[i][prop]
        return ans
}
