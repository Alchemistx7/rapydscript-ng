# vim:fileencoding=utf-8
# License: BSD
# Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

# globals: exports, console, ρσ_iterator_symbol, ρσ_kwargs_symbol, ρσ_arraylike, ρσ_list_contains

def ρσ_bool(val):
    return v'!!val'

def ρσ_eslice(arr, step, start, end):
    arr = arr[:]
    if type(arr) is 'string' or isinstance(arr, String):
        isString = True
        arr = arr.split('')

    if step < 0:
        step = -step
        arr.reverse()
        if type(start) is not "undefined": start = arr.length - start - 1
        if type(end) is not "undefined": end = arr.length - end - 1
    if type(start) is "undefined": start = 0
    if type(end) is "undefined": end = arr.length

    arr = arr.slice(start, end).filter(def(e, i): return i % step is 0;)
    return isString ? arr.join('') : arr

def ρσ_print():
    if v'typeof console' is 'object':
        parts = v'[]'
        for v'var i = 0; i < arguments.length; i++':
            parts.push(ρσ_str(arguments[i]))  # noqa: undef
        console.log(parts.join(' '))

def ρσ_int(val, base):
    ans = parseInt(val, base or 10)
    if isNaN(ans):
        raise ValueError('Invalid literal for int with base ' + (base or 10) + ': ' + val)
    return ans

def ρσ_float():
    ans = parseFloat.apply(None, arguments)
    if isNaN(ans):
        raise ValueError('Could not convert string to float: ' + arguments[0])
    return ans

def ρσ_arraylike_creator():
    names = 'Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array'.split(' ')
    if type(HTMLCollection) is 'function':
        names = names.concat('HTMLCollection NodeList NamedNodeMap'.split(' '))
    return def(x):
        if Array.isArray(x) or v'typeof x' is 'string' or names.indexOf(Object.prototype.toString.call(x).slice(8, -1)) > -1:
            return True
        return False

def options_object(f):
    return def():
        if v'typeof arguments[arguments.length - 1] === "object"':
            arguments[arguments.length - 1][ρσ_kwargs_symbol] = True
        return f.apply(this, arguments)

def ρσ_id(x):
    return x.ρσ_object_id

def ρσ_dir(item):
    # TODO: this isn't really representative of real Python's dir(), nor is it
    # an intuitive replacement for "for ... in" loop, need to update this logic
    # and introduce a different way of achieving "for ... in"
    arr = []
    for v'var i in item': arr.push(i)  # noqa:undef
    return arr

def ρσ_ord(x):
    ans = x.charCodeAt(0)
    if 0xD800 <= ans <= 0xDBFF:
        second = x.charCodeAt(1)
        if 0xDC00 <= second <= 0xDFFF:
            return (ans - 0xD800) * 0x400 + second - 0xDC00 + 0x10000
        raise TypeError('string is missing the low surrogate char')
    return ans

def ρσ_chr(code):
    if code <= 0xFFFF:
        return String.fromCharCode(code)
    code -= 0x10000
    return String.fromCharCode(0xD800+(code>>10), 0xDC00+(code&0x3FF))

def ρσ_callable(x):
    return v'typeof x === "function"'

def ρσ_bin(x):
    if type(x) is not 'number' or x % 1 is not 0:
        raise TypeError('integer required')
    ans = x.toString(2)
    if ans[0] is '-':
        ans = '-' + '0b' + ans[1:]
    else:
        ans = '0b' + ans
    return ans

def ρσ_hex(x):
    if type(x) is not 'number' or x % 1 is not 0:
        raise TypeError('integer required')
    ans = x.toString(16)
    if ans[0] is '-':
        ans = '-' + '0x' + ans[1:]
    else:
        ans = '0x' + ans
    return ans

def ρσ_enumerate(iterable):
    if ρσ_arraylike(iterable):
        ans = {
            '_i': -1,
            'next':def():
                this._i += 1
                if this._i < iterable.length:
                    return {'done':False, 'value':[this._i, iterable[this._i]]}
                return {'done':True}
        }
        ans[ρσ_iterator_symbol] = def():
            return this
        return ans
    if type(iterable[ρσ_iterator_symbol]) is 'function':
        iterator = (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[ρσ_iterator_symbol]()
        ans = {
            '_iterator':iterator,
            '_i': -1,
            'next':def():
                r = this._iterator.next()
                if r.done:
                    return {'done':True}
                this._i += 1
                return {'done':False, 'value':[this._i, r.value]}
        }
        ans[ρσ_iterator_symbol] = def():
            return this
        return ans
    return ρσ_enumerate(Object.keys(iterable))

def ρσ_reversed(iterable):
    if ρσ_arraylike(iterable):
        ans = {
            '_i': iterable.length,
            'next':def():
                this._i -= 1
                if this._i > -1:
                    return {'done':False, 'value':iterable[this._i]}
                return {'done':True}
        }
        ans[ρσ_iterator_symbol] = def():
            return this
        return ans
    raise TypeError('reversed() can only be called on arrays or strings')

def ρσ_iter(iterable):
    # Generate a JavaScript iterator object from iterable
    if type(iterable[ρσ_iterator_symbol]) is 'function':
        return (type(Map) is 'function' and isinstance(iterable, Map)) ? iterable.keys() : iterable[ρσ_iterator_symbol]()
    if ρσ_arraylike(iterable):
        ans = {
            '_i': -1,
            'next':def():
                this._i += 1
                if this._i < iterable.length:
                    return {'done':False, 'value':iterable[this._i]}
                return {'done':True}
        }
        ans[ρσ_iterator_symbol] = def():
            return this
        return ans
    return ρσ_iter(Object.keys(iterable))

def ρσ_range(start, stop, step):
    if arguments.length <= 1:
        stop = start or 0
        start = 0
    step = arguments[2] or 1
    length = Math.max(Math.ceil((stop - start) / step), 0)
    return {
        ρσ_iterator_symbol: def(): return this;,
        '_i': start - step,
        '_idx': -1,
        'next': def():
            this._i += step
            this._idx += 1
            if this._idx >= length:
                return {'done':True}
            return {'done':False, 'value':this._i}
        ,
    }

def ρσ_getattr(obj, name, defval):
    try:
        ret = obj[name]
    except TypeError:
        if defval is undefined:
            raise AttributeError('The attribute ' + name + ' is not present')
        return defval
    if ret is undefined and not v'(name in obj)':
        if defval is undefined:
            raise AttributeError('The attribute ' + name + ' is not present')
        ret = defval
    return ret

def ρσ_setattr(obj, name, value):
    obj[name] = value

def ρσ_hasattr(obj, name):
    return v'name in obj'

ρσ_len = (def ():

    def len(obj):
        if ρσ_arraylike(obj): return obj.length
        if type(obj.__len__) is 'function': return obj.__len__()
        if v'obj instanceof Set' or v'obj instanceof Map': return obj.size
        return Object.keys(obj).length

    def len5(obj):
        if ρσ_arraylike(obj): return obj.length
        if type(obj.__len__) is 'function': return obj.__len__()
        return Object.keys(obj).length

    return len if v'typeof Set' is 'function' and v'typeof Map' is 'function' else len5
)()


v'var abs = Math.abs, max = Math.max, min = Math.min, bool = ρσ_bool'
v'var float = ρσ_float, int = ρσ_int, arraylike = ρσ_arraylike_creator(), ρσ_arraylike = arraylike'
v'var print = ρσ_print, eslice = ρσ_eslice, id = ρσ_id'
v'var dir = ρσ_dir, ord = ρσ_ord, chr = ρσ_chr, bin = ρσ_bin, hex = ρσ_hex, callable = ρσ_callable'
v'var enumerate = ρσ_enumerate, iter = ρσ_iter, reversed = ρσ_reversed, len = ρσ_len'
v'var range = ρσ_range, getattr = ρσ_getattr, setattr = ρσ_setattr, hasattr = ρσ_hasattr'
