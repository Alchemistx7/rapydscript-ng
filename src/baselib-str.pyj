# vim:fileencoding=utf-8
# License: BSD
# Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

# globals: _$rapyd$_kwargs_symbol, _$rapyd$_list_decorate, _$rapyd$_iterator_symbol

def _$rapyd$_repr_js_builtin(x, as_array):
    ans = v'[]'
    b = '{}'
    if as_array:
        b = '[]'
        for v'var i = 0; i < x.length; i++':
            ans.push(_$rapyd$_repr(x[i]))
    else:
        keys = Object.keys(x)
        for v'var k = 0; k < keys.length; k++':
            key = keys[k]
            ans.push(JSON.stringify(key) + ':' + _$rapyd$_repr(x[key]))
    return b[0] + ans.join(', ') + b[1]

def _$rapyd$_repr(x):
    if x is None:
        return 'None'
    if x is undefined:
        return 'undefined'
    ans = x
    if v'typeof x.__repr__ === "function"':
        ans = x.__repr__()
    elif x is True or x is False:
        ans = 'True' if x else 'False'
    elif Array.isArray(x):
        ans = _$rapyd$_repr_js_builtin(x, True)
    elif type(x) is 'function':
        ans = x.toString()
    else:
        name = Object.prototype.toString.call(x).slice(8, -1)
        if "Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".indexOf(name) != -1:
            return name+'(['+[str.format('0x{:02x}', i) for i in x].join(', ')+'])'
        ans = x.toString() if v'typeof x.toString === "function"' else x
        if ans is '[object Object]':
            # Assume this is a dictionary
            return _$rapyd$_repr_js_builtin(x)
        try:
            ans = JSON.stringify(x)
        except:
            pass
    return ans + ''  # Ensures we return an object of type string (i.e. primitive value) rather than a String object

def _$rapyd$_str(x):
    if x is None:
        return 'None'
    if x is undefined:
        return 'undefined'
    ans = x
    if v'typeof x.__str__ === "function"':
        ans = x.__str__()
    elif v'typeof x.__repr__ === "function"':
        ans = x.__repr__()
    elif x is True or x is False:
        ans = 'True' if x else 'False'
    elif Array.isArray(x):
        ans = _$rapyd$_repr_js_builtin(x, True)
    elif v'typeof x.toString === "function"':
        name = Object.prototype.toString.call(x).slice(8, -1)
        if "Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".indexOf(name) != -1:
            return name+'(['+[str.format('0x{:02x}', i) for i in x].join(', ')+'])'
        ans = x.toString()
        if ans is '[object Object]':
            # Assume this is a dictionary
            ans = _$rapyd$_repr_js_builtin(x)
    return ans + ''  # Ensures we return an object of type string (i.e. primitive value) rather than a String object

# format()  {{{
_$rapyd$_str.format = def ():
    template = arguments[0]
    if template is undefined:
        raise TypeError("Template is required")
    args = Array.prototype.slice.call(arguments, 1)
    kwargs = {}
    if args.length and args[-1][_$rapyd$_kwargs_symbol] is not undefined:
        kwargs = args[-1]
        args = args[:-1]

    explicit = implicit = False
    idx = 0

    if _$rapyd$_str.format._template_resolve_pat is undefined:
        _$rapyd$_str.format._template_resolve_pat = /[.\[]/

    def resolve(arg, object):
        if not arg:
            return object
        first, arg = arg[0], arg[1:]
        key = arg.split(_$rapyd$_str.format._template_resolve_pat, 1)[0]
        rest = arg[key.length:]
        ans = (first is '[') ? object[key[:-1]] : getattr(object, key)
        if ans is undefined:
            raise KeyError((first is '[') ? key[:-1] : key)
        return resolve(rest, ans)

    def resolve_format_spec(format_spec):
        if _$rapyd$_str.format._template_resolve_fs_pat is undefined:
            _$rapyd$_str.format._template_resolve_fs_pat = /[{]([a-zA-Z0-9_]+)[}]/g
        return format_spec.replace(_$rapyd$_str.format._template_resolve_fs_pat, def (match, key):
            if not Object.prototype.hasOwnProperty.call(kwargs, key):
                return ''
            return '' + kwargs[key]
        )

    def apply_formatting(value, format_spec):
        if format_spec.indexOf('{') is not -1:
            format_spec = resolve_format_spec(format_spec)
        if _$rapyd$_str.format._template_format_pat is undefined:
            _$rapyd$_str.format._template_format_pat = ///
                ([^{}](?=[<>=^]))?([<>=^])? # fill & align
                ([-+\x20])? # sign
                (\#)? # integer base specifier
                (0)? # zero-padding
                (\d+)? # width
                (,)? # use a comma thousands-seperator
                (?:\.(\d+))? # precision
                ([bcdeEfFgGnosxX%])? # type
            ///

        try:
            fill, align, sign, fhash, zeropad, width, comma, precision, ftype = format_spec.match(_$rapyd$_str.format._template_format_pat)[1:]
        except TypeError:
            return value
        if zeropad:
            fill = fill or '0'
            align = align or '='
        else:
            fill = fill or ' '
            align = align or '>'
        is_numeric = v'Number(value) === value'
        is_int = is_numeric and v'value % 1 === 0'
        precision = parseInt(precision, 10)
        lftype = (ftype or '').toLowerCase()

        if ftype is 'n':
            is_numeric = True
            if is_int:
                if comma:
                    raise ValueError("Cannot specify ',' with 'n'")
                value = parseInt(value, 10).toLocaleString()
            else:
                value = parseFloat(value).toLocaleString()

        elif v"['b', 'c', 'd', 'o', 'x']".indexOf(lftype) is not -1:
            value = parseInt(value, 10)
            is_numeric = True
            if not isNaN(value):
                if ftype is 'b':
                    value = v'(value >>> 0).toString(2)'
                    if fhash:
                        value = '0b' + value
                elif ftype is 'c':
                    if value > 0xFFFF:
                        code = value - 0x10000
                        value = String.fromCharCode(0xD800+(code>>10), 0xDC00+(code&0x3FF))
                    else:
                        value = String.fromCharCode(value)
                elif ftype is 'd':
                    if comma:
                        value = value.toLocaleString('en-US')
                    else:
                        value = value.toString(10)
                elif ftype is 'o':
                    value = value.toString(8)
                    if fhash:
                        value = '0o' + value
                elif lftype is 'x':
                    value = value.toString(16)
                    value = value.toLowerCase() if ftype is 'x' else value.toUpperCase()
                    if fhash:
                        value = '0x' + value

        elif v"['e','f','g','%']".indexOf(lftype) is not -1:
            is_numeric = True
            value = parseFloat(value)
            if lftype is 'e':
                value = value.toExponential(6 if isNaN(precision) else precision)
                value = value.toUpperCase() if ftype is 'E' else value.toLowerCase()
            elif lftype is 'f':
                value = value.toFixed(6 if isNaN(precision) else precision)
                value = value.toUpperCase() if ftype is 'F' else value.toLowerCase()
            elif ftype is '%':
                value *= 100
                value = value.toFixed(6 if isNaN(precision) else precision) + '%'
            elif lftype is 'g':
                if isNaN(precision):
                    precision = 6
                precision = max(1, precision)
                exp = parseInt(value.toExponential(precision - 1).toLowerCase().split('e')[1], 10)
                if -4 <= exp < precision:
                    value = value.toFixed(precision - 1 - exp)
                else:
                    value = value.toExponential(precision - 1)
                value = value.replace(/0+$/g, '')
                if value[-1] is '.':
                    value = value[:-1]
                if ftype is 'G':
                    value = value.toUpperCase()

        else:
            value += ''  # Ensure we have a string
            if not isNaN(precision):
                value = value[:precision]

        value += ''  # Ensure we have a string

        if is_numeric and sign:
            nval = v'Number(value)'
            is_positive = not isNaN(nval) and nval >= 0
            if is_positive and (sign is ' ' or sign is '+'):
                value = sign + value

        def repeat(char, num):
            return v'(new Array(num+1)).join(char)'

        if is_numeric and width and width[0] is '0':
            width = width[1:]
            fill, align = '0', '='

        width = parseInt(width or '-1', 10)
        if isNaN(width):
            raise ValueError('Invalid width specification: ' + width)

        if fill and value.length < width:
            if align is '<':
                value = value + repeat(fill, width - value.length)
            elif align is '>':
                value = repeat(fill, width - value.length) + value
            elif align is '^':
                left = (width - value.length) // 2
                right = width - left - value.length
                value = repeat(fill, left) + value + repeat(fill, right)
            elif align is '=':
                if value[0] in "+- ":
                    value = value[0] + repeat(fill, width - value.length) + value[1:]
                else:
                    value = repeat(fill, width - value.length) + value
            else:
                raise ValueError('Unrecognized alignment: ' + align)

        return value

    def parse_markup(markup):
        key = transformer = format_spec = ''
        pos = 0
        state = 0
        while pos < markup.length:
            ch = markup[pos]
            if state is 0:
                if ch is '!':
                    state = 1
                elif ch is ':':
                    state = 2
                else:
                    key += ch
            elif state is 1:
                if ch is ':':
                    state = 2
                else:
                    transformer += ch
            else:
                format_spec += ch
            pos += 1
        return key, transformer, format_spec

    def render_markup(markup):
        nonlocal explicit, implicit, idx
        key, transformer, format_spec = parse_markup(markup)
        if transformer and v"['a', 'r', 's']".indexOf(transformer) is -1:
            raise ValueError('Unknown conversion specifier: ' + transformer)
        lkey = key.length and key.split(/[.\[]/, 1)[0]
        if lkey:
            explicit = True
            if implicit:
                raise ValueError('cannot switch from automatic field numbering to manual field specification')
            nvalue = parseInt(lkey)
            object = isNaN(nvalue) ? kwargs[lkey] : args[nvalue]
            if object is undefined:
                if isNaN(nvalue):
                    raise KeyError(lkey)
                raise IndexError(lkey)
            object = resolve(key[lkey.length:], object)
        else:
            implicit = True
            if explicit:
                raise ValueError('cannot switch from manual field specification to automatic field numbering')
            if idx >= args.length:
                raise IndexError('Not enough arguments to match template: ' + template)
            object = args[idx]
            idx += 1
        if type(object) is 'function':
            object = object()
        ans = '' + object
        if format_spec:
            ans = apply_formatting(ans, format_spec)
        return ans


    ans = ''
    pos = 0
    in_brace = 0
    markup = ''
    while pos < template.length:
        ch = template[pos]
        if in_brace:
            if ch is '{':
                in_brace += 1
                markup += '{'
            elif ch is '}':
                in_brace -= 1
                if in_brace > 0:
                    markup += '}'
                else:
                    ans += render_markup(markup)
            else:
                markup += ch
        else:
            if ch is '{':
                if template[pos+1] is '{':
                    pos += 1
                    ans += '{'
                else:
                    in_brace = 1
                    markup = ''
            else:
                ans += ch

        pos += 1

    if in_brace:
        raise ValueError("expected '}' before end of string")

    return ans

# }}}

_$rapyd$_str.capitalize = def (string):
    if string:
        string = string[0].toUpperCase() + string[1:].toLowerCase()
    return string

_$rapyd$_str.center = def(string, width, fill):
    left = (width - string.length) // 2
    right = width - left - string.length  # noqa:unused-local
    fill = fill or ' '
    return v'new Array(left+1).join(fill)' + string + v'new Array(right+1).join(fill)'

_$rapyd$_str.count = def(string, needle, start, end):
    start = start or 0
    end = end or string.length
    if start < 0 or end < 0:
        string = string[start:end]
        start, end = 0, string.length
    pos = start
    step = needle.length
    ans = 0
    while pos is not -1:
        pos = string.indexOf(needle, pos)
        if pos is not -1:
            ans += 1
            pos += step
    return ans

_$rapyd$_str.endswith = def(string, suffixes, start, end):
    start = start or 0
    if type(suffixes) is 'string':
        suffixes = v'[suffixes]'
    if end is not undefined:
        string = string[:end]
    for v'var i = 0; i < suffixes.length; i++':
        q = suffixes[i]  # noqa:undef
        if string.indexOf(q, Math.max(start, string.length - q.length)) is not -1:
            return True
    return False

_$rapyd$_str.startswith = def(string, prefixes, start, end):
    start = start or 0
    if type(prefixes) is 'string':
        prefixes = v'[prefixes]'
    for v'var i = 0; i < prefixes.length; i++':
        prefix = prefixes[i]  # noqa:undef
        end = string.length if end is undefined else end
        if end - start >= prefix.length and prefix is string[start:start + prefix.length]:
            return True
    return False

_$rapyd$_str.find = def(string, needle, start, end):
    while start < 0:
        start += string.length
    ans = string.indexOf(needle, start)
    if end is not undefined and ans is not -1:
        while end < 0:
            end += string.length
        if ans >= end - needle.length:
            return -1
    return ans

_$rapyd$_str.rfind = def(string, needle, start, end):
    while end < 0:
        end += string.length
    ans = string.lastIndexOf(needle, end - 1)
    if start is not undefined and ans is not -1:
        while start < 0:
            start += string.length
        if ans < start:
            return -1
    return ans

_$rapyd$_str.index = def(string, needle, start, end):
    ans = _$rapyd$_str.find.apply(None, arguments)
    if ans is -1:
        raise ValueError('substring not found')
    return ans

_$rapyd$_str.rindex = def(string, needle, start, end):
    ans = _$rapyd$_str.rfind.apply(None, arguments)
    if ans is -1:
        raise ValueError('substring not found')
    return ans

_$rapyd$_str.islower = def(string):
    return string.length > 0 and string.toUpperCase() is not string

_$rapyd$_str.isupper = def(string):
    return string.length > 0 and string.toLowerCase() is not string

_$rapyd$_str.isspace = def(string):
    return string.length > 0 and /^\s+$/.test(string)

_$rapyd$_str.join = def(string, iterable):
    if Array.isArray(iterable):
        return iterable.join(string)
    ans = ''
    r = iterable.next()
    while not r.done:
        if ans:
            ans += string
        ans += r.value
        r = iterable.next()
    return ans

_$rapyd$_str.ljust = def(string, width, fill):
    if width > string.length:
        fill = fill or ' '
        string += v'new Array(width - string.length + 1).join(fill)'
    return string

_$rapyd$_str.rjust = def(string, width, fill):
    if width > string.length:
        fill = fill or ' '
        string = v'new Array(width - string.length + 1).join(fill)' + string
    return string

_$rapyd$_str.lower = def(string):
    return string.toLowerCase()

_$rapyd$_str.upper = def(string):
    return string.toUpperCase()

_$rapyd$_str.lstrip = def(string, chars):
    pos = 0
    chars = chars or _$rapyd$_str.whitespace
    while chars.indexOf(string[pos]) is not -1:
        pos += 1
    if pos:
        string = string[pos:]
    return string

_$rapyd$_str.rstrip = def(string, chars):
    pos = string.length - 1
    chars = chars or _$rapyd$_str.whitespace
    while chars.indexOf(string[pos]) is not -1:
        pos -= 1
    if pos < string.length - 1:
        string = string[:pos + 1]
    return string

_$rapyd$_str.strip = def(string, chars):
    return _$rapyd$_str.lstrip(_$rapyd$_str.rstrip(string, chars), chars)

_$rapyd$_str.partition = def(string, sep):
    idx = string.indexOf(sep)
    if idx is -1:
        return string, '', ''
    return string[:idx], sep, string[idx + sep.length:]

_$rapyd$_str.rpartition = def(string, sep):
    idx = string.lastIndexOf(sep)
    if idx is -1:
        return '', '', string
    return string[:idx], sep, string[idx + sep.length:]

_$rapyd$_str.replace = def(string, old, repl, count):
    if count is 1:
        return string.replace(old, repl)
    if count < 1:
        return string
    count = count or Number.MAX_VALUE
    pos = 0
    while count > 0:
        count -= 1
        idx = string.indexOf(old, pos)
        if idx is -1:
            break
        pos = idx + repl.length
        string = string[:idx] + repl + string[idx + old.length:]
    return string

_$rapyd$_str.split = def(string, sep, maxsplit):
    if maxsplit is 0:
        return [string]
    if sep is undefined or sep is None:
        if maxsplit > 0:
            ans = string.split(/(\s+)/)
            extra = ''
            parts = v'[]'
            for v'var i = 0; i < ans.length; i++':
                if parts.length >= maxsplit + 1:
                    extra += ans[i]
                elif i % 2 is 0:
                    parts.push(ans[i])  # noqa:undef
            parts[-1] += extra
            ans = parts
        else:
            ans = string.split(/\s+/)
    else:
        if sep is '':
            raise ValueError('empty separator')
        ans = string.split(sep)
        if maxsplit > 0 and ans.length > maxsplit:
            extra = ans[maxsplit:].join(sep)
            ans = ans[:maxsplit]
            ans.push(extra)
    return _$rapyd$_list_decorate(ans)

_$rapyd$_str.rsplit = def(string, sep, maxsplit):
    if not maxsplit:
        return _$rapyd$_str.split.call(None, string, sep, maxsplit)
    if sep is undefined or sep is None:
        if maxsplit > 0:
            ans = v'[]'
            is_space = /\s/
            pos = string.length - 1
            current = ''
            while pos > -1 and maxsplit > 0:
                spc = False
                ch = string[pos]
                while pos > -1 and is_space.test(ch):
                    spc = True
                    ch = v'string[--pos]'
                if spc:
                    if current:
                        ans.push(current)
                        maxsplit -= 1
                    current = ch
                else:
                    current += ch
                pos -= 1
            ans.push(string[:pos + 1] + current)
            ans.reverse()
        else:
            ans = string.split(/\s+/)
    else:
        if sep is '':
            raise ValueError('empty separator')
        ans = v'[]'
        pos = end = string.length
        while pos > -1 and maxsplit > 0:
            maxsplit -= 1
            idx = string.lastIndexOf(sep, pos)
            if idx is -1:
                break
            ans.push(string[idx + sep.length:end])
            pos = idx - 1
            end = idx
        ans.push(string[:end])
        ans.reverse()
    return _$rapyd$_list_decorate(ans)

_$rapyd$_str.splitlines = def(string, keepends):
    if keepends:
        parts = string.split(/((?:\r?\n)|\r)/)
        ans = v'[]'
        for v'var i = 0; i < parts.length; i++':
            if i % 2 is 0:
                ans.push(parts[i])
            else:
                ans[-1] += parts[i]  # noqa:undef
    else:
        ans = string.split(/(?:\r?\n)|\r/)
    return _$rapyd$_list_decorate(ans)

_$rapyd$_str.swapcase = def(string):
    ans = v'new Array(string.length)'
    for v'var i = 0; i < ans.length; i++':
        a = string[i]
        # We dont care about non-BMP chars as they are not cased anyway
        b = a.toLowerCase()
        if a is b:
            b = a.toUpperCase()
        ans[i] = b  # noqa:undef
    return ans.join('')

_$rapyd$_str.zfill = def(string, width):
    if width > string.length:
        string = v'new Array(width - string.length + 1).join("0")' + string
    return string

_$rapyd$_str.uchrs = def(string, with_positions):
    # Return iterator over unicode chars in string. Will yield the unicode
    # replacement char U+FFFD for broken surrogate pairs
    return {
        '_string': string,
        '_pos': 0,
        _$rapyd$_iterator_symbol: def(): return this;,
        'next' : def():
            length = this._string.length
            if this._pos >= length:
                return {'done': True}
            pos = this._pos
            value = v'this._string.charCodeAt(this._pos++)'
            ans = '\ufffd'
            if 0xD800 <= value <= 0xDBFF:
                if this._pos < length:
                    # high surrogate, and there is a next character
                    extra = v'this._string.charCodeAt(this._pos++)'
                    if (extra & 0xDC00) is 0xDC00: # low surrogate
                        ans = String.fromCharCode(value, extra)
            elif (value & 0xDC00) is not 0xDC00: # not a low surrogate
                ans = String.fromCharCode(value)
            if with_positions:
                return {'done':False, 'value':[pos, ans]}
            else:
                return {'done':False, 'value':ans}
    }

_$rapyd$_str.uslice = def(string, start, end):
    items = v'[]'
    iterator = _$rapyd$_str.uchrs(string)
    r = iterator.next()
    while not r.done:
        items.push(r.value)
        r = iterator.next()
    return items[start or 0:items.length if end is undefined else end].join('')

_$rapyd$_str.ulen = def(string):
    iterator = _$rapyd$_str.uchrs(string)
    r = iterator.next()
    ans = 0
    while not r.done:
        r = iterator.next()
        ans += 1
    return ans

_$rapyd$_str.ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'
_$rapyd$_str.ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
_$rapyd$_str.ascii_letters   = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
_$rapyd$_str.digits   = '0123456789'
_$rapyd$_str.punctuation = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
_$rapyd$_str.printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \t\n\r\x0b\x0c'
_$rapyd$_str.whitespace   = ' \t\n\r\x0b\x0c'

v'var str = _$rapyd$_str, repr = _$rapyd$_repr'
