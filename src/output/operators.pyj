# vim:fileencoding=utf-8
# License: BSD Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from ast import (
    AST_Number, AST_Unary, AST_Seq, AST_Array, AST_Binary, AST_Set, AST_Object,
    AST_Statement, AST_Conditional, AST_BaseCall, AST_Symbol, AST_SymbolRef, AST_Assign,
    AST_Return, AST_SimpleStatement, AST_String, AST_Sub, AST_ItemAccess
)
from output.loops import unpack_tuple

def print_getattr(self, output, skip_expression):  # AST_Dot
    if not skip_expression:
        expr = self.expression
        expr.print(output)
    if isinstance(expr, AST_Number) and expr.getValue() >= 0:
        if not /[xa-f.]/i.test(output.last()):
            output.print(".")
    output.print(".")
    # the name after dot would be mapped about here.
    output.print_name(self.property)

def print_getitem(self, output):  # AST_Sub
    expr = self.expression
    prop = self.property
    if isinstance(prop, (AST_Number, AST_String)) or (isinstance(prop, AST_SymbolRef) and prop.name and prop.name.startsWith('ρσ_')):
        expr.print(output)
        output.print('['), prop.print(output), output.print(']')
        return

    is_repeatable = isinstance(expr, AST_SymbolRef)
    if is_repeatable:
        expr.print(output)
    else:
        output.spaced('(ρσ_expr_temp', '=', expr), output.print(')')
        expr = {'print': def(): output.print('ρσ_expr_temp');}

    if isinstance(prop, AST_Unary) and prop.operator is "-" and isinstance(prop.expression, AST_Number):
        output.print('['), expr.print(output), output.print('.length'), prop.print(output), output.print(']')
        return
    is_repeatable = isinstance(prop, AST_SymbolRef)
    # We have to check the type of the property because if it is a Symbol, it
    # will raise a TypeError with the < operator.
    output.spaced('[(typeof', '')
    if is_repeatable:
        prop.print(output)
    else:
        output.spaced('(ρσ_prop_temp', '=', prop), output.print(')')
        prop = {'print':def(): output.print('ρσ_prop_temp');}
    output.spaced('', '===', '"number"', '&&', prop)
    output.spaced('', '<', '0)', '?', expr), output.spaced('.length', '+', prop, ':', prop)
    output.print("]")

def print_rich_getitem(self, output):  # AST_ItemAccess
    func = 'ρσ_' + ('setitem' if self.assignment else 'getitem')
    output.print(func + '(')
    self.expression.print(output), output.comma(), self.property.print(output)
    if self.assignment:
        output.comma(), self.assignment.print(output)
    output.print(')')

def print_splice_assignment(self, output):
    # splice assignment via pythonic array[start:end]
    output.print('Array.splice.apply')
    output.with_parens(def():
        self.expression.print(output)
        output.comma()
        output.with_square(def():
            self.property.print(output)
            output.comma()
            self.property2.print(output)
            output.print('-')
            self.property.print(output)
        )
        output.print('.concat')
        output.with_parens(def():
            self.assignment.print(output)
        )
    )

def print_delete(self, output):
    if isinstance(self, AST_Symbol):
        output.assign(self), output.print('undefined')
    elif isinstance(self, (AST_Sub, AST_ItemAccess)):
        output.print('ρσ_delitem('), self.expression.print(output), output.comma(), self.property.print(output), output.print(')')
    else:
        output.spaced('delete', self)

def print_unary_prefix(self, output):
    op = self.operator
    if op is 'delete':
        return print_delete(self.expression, output)
    output.print(op)
    if /^[a-z]/i.test(op):
        output.space()
    self.expression.print(output)

def write_instanceof(left, right, output):

    def do_many(vals):
        output.print('ρσ_instanceof.apply(null,'), output.space()
        output.print('['), left.print(output), output.comma()
        for v'var i = 0; i < vals.length; i++':
            vals[i].print(output)
            if i is not vals.length - 1:
                output.comma()
        output.print('])')

    if isinstance(right, AST_Seq):
        do_many(right.to_array())
    elif isinstance(right, AST_Array):
        do_many(right.elements)
    else:
        output.print('ρσ_instanceof(')
        left.print(output), output.comma(), right.print(output), output.print(')')

def write_smart_equality(self, output):
    def is_ok(x):
        return not isinstance(x, (AST_Array, AST_Set, AST_Object, AST_Statement, AST_Binary, AST_Conditional, AST_BaseCall))
    if is_ok(self.left) and is_ok(self.right):
        if self.operator is '==':
            output.print('(')
            output.spaced(self.left, '===', self.right, '||', 'typeof', self.left, '===', '"object"', '&&', 'ρσ_equals(')
            self.left.print(output), output.print(','), output.space(), self.right.print(output), output.print('))')
        else:
            output.print('(')
            output.spaced(self.left, '!==', self.right, '&&', '(typeof', self.left, '!==', '"object"', '||', 'ρσ_not_equals(')
            self.left.print(output), output.print(','), output.space(), self.right.print(output), output.print(')))')
    else:
        output.print('ρσ_' + ('equals(' if self.operator is '==' else 'not_equals('))
        self.left.print(output), output.print(','), output.space(), self.right.print(output), output.print(')')

def print_binary_op(self, output):
    comparators = {
        "<": True,
        ">": True,
        "<=": True,
        ">=": True,
        "==": True,
        "!=": True
    }
    function_ops = {
        "in": "ρσ_in",
        "**": "Math.pow"
    }

    if function_ops[self.operator]:
        output.print(function_ops[self.operator])
        output.with_parens(def():
            self.left.print(output)
            output.comma()
            self.right.print(output)
        )
    elif comparators[self.operator] and isinstance(self.left, AST_Binary) and comparators[self.left.operator]:
        if isinstance(self.left.right, AST_Symbol):
            # left side compares against a regular variable,
            # no caching needed
            self.left.print(output)
            leftvar = self.left.right.name
        else:
            # some logic is being performed, let's cache it
            self.left.left.print(output)
            output.space()
            output.print(self.left.operator)
            output.space()
            output.with_parens(def():
                nonlocal leftvar
                output.assign("ρσ_cond_temp")
                self.left.right.print(output)
                leftvar = "ρσ_cond_temp"
            )

        output.space()
        output.print("&&")
        output.space()
        output.print(leftvar)
        output.space()
        output.print(self.operator)
        output.space()
        self.right.print(output)
    elif self.operator is '//':
        output.print('Math.floor')
        output.with_parens(def():
            self.left.print(output)
            output.space()
            output.print('/')
            output.space()
            self.right.print(output)
        )
    elif self.operator is '==' or self.operator is '!=':
        write_smart_equality(self, output)
    elif self.operator is 'instanceof':
        write_instanceof(self.left, self.right, output)
    elif self.operator is '*' and isinstance(self.left, AST_String):
        self.left.print(output), output.print('.repeat('), self.right.print(output), output.print(')')
    else:
        output.spaced(self.left, self.operator, self.right)

def print_assignment(self, output):
    flattened = False
    left = self.left
    if isinstance(left, AST_Seq):
        left = new AST_Array({'elements':v'[left.car, left.cdr]'})
    if isinstance(left, AST_Array):
        flat = left.flatten()
        flattened = flat.length > left.elements.length
        output.print("ρσ_unpack")
    else:
        left.print(output)
    output.space()
    output.print(self.operator)
    output.space()
    if flattened:
        output.print('ρσ_flatten')
        output.with_parens(def():self.right.print(output);)
    else:
        self.right.print(output)
    if isinstance(left, AST_Array):
        output.semicolon()
        output.newline()
        unpack_tuple(flat, output, True)

def print_assign(self, output):
    if self.operator is '//=':
        output.assign(self.left)
        output.print('Math.floor')
        output.with_parens(def():
            self.left.print(output)
            output.space()
            output.print('/')
            output.space()
            self.right.print(output)
        )
        return
    if self.operator is '=' and self.is_chained():
        left_hand_sides, rhs = self.traverse_chain()
        temp_rhs = new AST_SymbolRef({'name':'ρσ_chain_assign_temp'})
        print_assignment(new AST_Assign({'left':temp_rhs, 'operator':'=', 'right':rhs}), output)
        output.end_statement(), output.indent()
        for lhs in left_hand_sides:
            print_assignment(new AST_Assign({'left':lhs, 'right':temp_rhs, 'operator':self.operator}), output)
            output.end_statement()
            if lhs is not left_hand_sides[-1]:
                output.indent()
    else:
        print_assignment(self, output)

def print_conditional(self, output, condition, consequent, alternative):
    condition, consequent, alternative = self.condition, self.consequent, self.alternative
    output.with_parens(def():condition.print(output);)
    output.space()
    output.print("?")
    output.space()
    consequent.print(output)
    output.space()
    output.colon()
    alternative.print(output)

def print_seq(output):
    self = this
    p = output.parent()
    print_seq = def():
        self.car.print(output)
        if self.cdr:
            output.comma()
            if output.should_break():
                output.newline()
                output.indent()
            self.cdr.print(output)

    # this will effectively convert tuples to arrays
    if isinstance(p, AST_Binary)
    or isinstance(p, AST_Return)
    or isinstance(p, AST_Array)
    or isinstance(p, AST_BaseCall)
    or isinstance(p, AST_SimpleStatement):
        output.with_square(print_seq)
    else:
        print_seq()

