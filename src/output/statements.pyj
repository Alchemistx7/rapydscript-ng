# vim:fileencoding=utf-8
# License: BSD Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from ast import (
    AST_Definitions, AST_Scope, AST_Method, AST_Except, AST_EmptyStatement,
    AST_Statement, AST_Seq, AST_BaseCall, AST_Dot, AST_Sub, AST_ItemAccess,
    AST_Conditional, AST_Binary, AST_UnaryPostfix, AST_BlockStatement
)

def force_statement(stat, output):
    if output.option("bracketize"):
        if not stat or isinstance(stat, AST_EmptyStatement):
            output.print("{}")
        elif isinstance(stat, AST_BlockStatement):
            stat.print(output)
        else:
            output.with_block(def():
                output.indent()
                stat.print(output)
                output.newline()
            )
    else:
        if not stat or isinstance(stat, AST_EmptyStatement):
            output.force_semicolon()
        else:
            stat.print(output)

# return true if the node at the top of the stack (that means the
# innermost node in the current output) is lexically the first in
# a statement.
def first_in_statement(output):
    a = output.stack()
    i = a.length
    node = a[i -= 1]
    p = a[i -= 1]
    while i > 0:
        if isinstance(p, AST_Statement) and p.body is node:
            return True
        if isinstance(p, AST_Seq) and p.car is node
        or isinstance(p, AST_BaseCall) and p.expression is node
        or isinstance(p, AST_Dot) and p.expression is node
        or isinstance(p, AST_Sub) and p.expression is node
        or isinstance(p, AST_ItemAccess) and p.expression is node
        or isinstance(p, AST_Conditional) and p.condition is node
        or isinstance(p, AST_Binary) and p.left is node
        or isinstance(p, AST_UnaryPostfix) and p.expression is node:
            node = p
            p = a[i -= 1]
        else:
            return False


def bind_methods(methods, output):
    # bind the methods
    if methods:
        for arg in methods:
            output.indent()
            output.print("this.")
            output.assign(arg)
            output.print("_$rapyd$_bind")
            output.with_parens(def():
                output.print("this.")
                output.print(arg)
                output.comma()
                output.print("this")
            )
            output.semicolon()
            output.newline()

def declare_vars(vars, output):
    # declare all variables as local, unless explictly set otherwise
    if vars.length:
        output.indent()
        output.print("var")
        output.space()
        vars.forEach(def(arg, i):
            if i:
                output.comma()

            arg.print(output)
        )
        output.semicolon()
        output.newline()

def display_body(body, is_toplevel, output):
    last = body.length - 1
    body.forEach(def(stmt, i):
        if not (isinstance(stmt, AST_EmptyStatement)) and not (isinstance(stmt, AST_Definitions)):
            output.indent()
            stmt.print(output)
            if not (i is last and is_toplevel):
                output.newline()
    )


def display_complex_body(node, is_toplevel, output):
    offset = 0
    # argument offset
    # this is a method, add 'var self = this'
    if isinstance(node, AST_Method) and not node.static:
        output.indent()
        output.print("var")
        output.space()
        output.assign(node.argnames[0])
        output.print("this")
        output.semicolon()
        output.newline()
        offset += 1

    if isinstance(node, AST_Scope):
        # if function takes any arguments
        if node.argnames:
            # If this function has optional parameters/*args/**kwargs declare it differently
            if node.argnames.is_simple_func is not True:
                a = node.argnames
                kw = 'arguments[arguments.length-1]'
                # Define all formal parameters
                for c, arg in enumerate(a):
                    i = c - offset
                    if i >= 0:
                        output.indent()
                        output.print("var")
                        output.space()
                        output.assign(arg)
                        if Object.prototype.hasOwnProperty.call(a.defaults, arg.name):
                            output.spaced('(arguments[' + i + ']', '===', 'undefined', '||',
                                            '(', i, '===', 'arguments.length-1', '&&', kw, '!==', 'null', '&&', 'typeof', kw, '===', '"object"', '&&',
                                            kw, '[_$rapyd$_kwargs_symbol]', '===', 'true))', '?', '')
                            output.with_parens(def():
                                a.defaults[arg.name].print(output)
                            )
                            output.space()
                            output.print(':')
                            output.space()
                        else:
                            output.spaced('(', i, '===', 'arguments.length-1', '&&', kw, '!==', 'null', '&&', 'typeof', kw, '===', '"object"', '&&',
                                            kw, '[_$rapyd$_kwargs_symbol]', '===', 'true)', '?', 'undefined', ':', '')
                        output.print('arguments[' + i + ']')
                        output.end_statement()
                if a.kwargs or a.has_defaults:
                    # Look for an options object
                    kw = (a.kwargs) ? a.kwargs.name : '_$rapyd$_kwargs_obj'
                    output.indent()
                    output.spaced('var', kw, '=', 'arguments[arguments.length-1]')
                    output.end_statement()
                    # Ensure kwargs is the options object
                    output.indent()
                    output.spaced('if', '(' + kw, '===', 'null', '||', 'typeof', kw, '!==', '"object"', '||', kw, '[_$rapyd$_kwargs_symbol]', '!==', 'true)', kw, '=', '{}')
                    output.end_statement()
                    # Read values from the kwargs object for any formal parameters
                    if a.has_defaults:
                        for dname in Object.keys(a.defaults):
                            output.indent()
                            output.spaced('if', '(Object.prototype.hasOwnProperty.call(' + kw + ',', '"' + dname + '"))')
                            output.with_block(def():
                                output.indent()
                                output.spaced(dname, '=', kw + '.' + dname)
                                output.end_statement()
                                if a.kwargs:
                                    output.indent()
                                    output.spaced('delete', kw + '.' + dname)
                                    output.end_statement()
                            )
                            output.newline()

                if a.starargs is not undefined:
                    # Define the *args parameter, putting in whatever is left after assigning the formal parameters and the options object
                    nargs = a.length - offset
                    output.indent()
                    output.spaced('var', a.starargs.name, '=', 'Array.prototype.slice.call(arguments,', nargs, ')')
                    output.end_statement()
                    # Remove the options object, if present
                    output.indent()
                    output.spaced('if', '(' + kw, '!==', 'null', '&&', 'typeof', kw, '===', '"object"', '&&', kw, '[_$rapyd$_kwargs_symbol]', '===', 'true)', a.starargs.name, '.pop()')
                    output.end_statement()

        # rebind parent's methods and bind own methods
        # for now we'll make a naive assumption that a function
        # named __init__ will only occur inside a class
        if output.option("auto_bind") and node.name and node.name.name is "__init__":
            output.indent()
            output.print("_$rapyd$_rebind_all")
            output.with_parens(def():
                output.print("this")
                output.comma()
                output.print("true")
            )
            output.semicolon()
            output.newline()
            bind_methods(node.bound, output)

        declare_vars(node.localvars, output)

    elif isinstance(node, AST_Except):
        if node.argname:
            output.indent()
            output.print("var")
            output.space()
            output.assign(node.argname)
            output.print("_$rapyd$_Exception")
            output.semicolon()
            output.newline()

    display_body(node.body, is_toplevel, output)

def print_bracketed(node, output, complex):
    if node.body.length > 0:
        output.with_block(def():
            if complex:
                display_complex_body(node, False, output)
            else:
                display_body(node.body, False, output)
        )
    else:
        output.print("{}")

