# vim:fileencoding=utf-8
# License: BSD Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>

from ast import AST_BlockStatement

def best_of(a):
    best = a[0]
    len_ = best.length
    for i in range(1, a.length):
        if a[i].length < len_:
            best = a[i]
            len_ = best.length
    return best

def make_num(num):
    str_ = num.toString(10)
    a = [ str_.replace(/^0\./, ".").replace("e+", "e") ]
    m = None

    if Math.floor(num) is num:
        if num >= 0:
            a.push("0x" + num.toString(16).toLowerCase(), # probably pointless
            "0" + num.toString(8))
        else:
            a.push("-0x" + (-num).toString(16).toLowerCase(), # probably pointless
            "-0" + (-num).toString(8))

        if m = /^(.*?)(0+)$/.exec(num):
            a.push(m[1] + "e" + m[2].length)

    elif m = /^0?\.(0+)(.*)$/.exec(num):
        a.push(m[2] + "e-" + (m[1].length + m[2].length), str_.substr(str_.indexOf(".")))

    return best_of(a)

def make_block(stmt, output):
    if isinstance(stmt, AST_BlockStatement):
        stmt.print(output)
        return

    output.with_block(def():
        output.indent()
        stmt.print(output)
        output.newline()
    )
