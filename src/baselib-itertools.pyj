# vim:fileencoding=utf-8
# License: BSD
# Copyright: 2015, Kovid Goyal <kovid at kovidgoyal.net>

# globals: ρσ_iterator_symbol

def sum(iterable, start):
    if Array.isArray(iterable):
        return iterable.reduce(
            def(prev, cur): return prev+cur
            ,
            start or 0
        )
    ans = start or 0
    iterator = iter(iterable)
    r = iterator.next()
    while not r.done:
        ans += r.value
        r = iterator.next()
    return ans

def map():
    func = arguments[0]
    iterators = new Array(arguments.length - 1)
    args = new Array(arguments.length - 1)
    for v'var i = 1; i < arguments.length; i++':
        iterators[i - 1] = iter(arguments[i])  # noqa:undef
    return {
        '_func': func,
        '_iterators': iterators,
        '_args': args,
        'next': def():
            for v'var i = 0; i < this._iterators.length; i++':
                r = this._iterators[i].next()
                if r.done:
                    return {'done':True}
                this._args[i] = r.value  # noqa:undef
            return {'done':False, 'value':this._func.apply(undefined, this._args)}
        ,
        ρσ_iterator_symbol: def (): return this;,
    }

def filter(func_or_none, iterable):
    return {
        '_iterator':iter(iterable),
        '_func': bool if func_or_none is None else func_or_none,
        'next': def():
            r = this._iterator.next()
            while not r.done:
                if this._func(r.value):
                    return r
                r = this._iterator.next()
            return {'done':True}
        ,
        ρσ_iterator_symbol: def (): return this;,
    }

def zip():
    iterators = new Array(arguments.length)
    for v'var i = 0; i < arguments.length; i++':
        iterators[i] = iter(arguments[i])  # noqa:undef
    return {
        '_iterators': iterators,
        'next': def():
            args = new Array(this._iterators.length)
            for v'var i = 0; i < this._iterators.length; i++':
                r = this._iterators[i].next()
                if r.done:
                    return {'done':True}
                args[i] = r.value  # noqa:undef
            return {'done':False, 'value':args}
        ,
        ρσ_iterator_symbol: def (): return this;,
    }
